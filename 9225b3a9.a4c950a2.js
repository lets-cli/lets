(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{106:function(e,n,t){"use strict";t.d(n,"a",(function(){return s})),t.d(n,"b",(function(){return u}));var a=t(0),l=t.n(a);function c(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function b(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){c(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function r(e,n){if(null==e)return{};var t,a,l=function(e,n){if(null==e)return{};var t,a,l={},c=Object.keys(e);for(a=0;a<c.length;a++)t=c[a],n.indexOf(t)>=0||(l[t]=e[t]);return l}(e,n);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(a=0;a<c.length;a++)t=c[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var p=l.a.createContext({}),o=function(e){var n=l.a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):b(b({},n),e)),t},s=function(e){var n=o(e.components);return l.a.createElement(p.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return l.a.createElement(l.a.Fragment,{},n)}},d=l.a.forwardRef((function(e,n){var t=e.components,a=e.mdxType,c=e.originalType,i=e.parentName,p=r(e,["components","mdxType","originalType","parentName"]),s=o(t),d=a,u=s["".concat(i,".").concat(d)]||s[d]||m[d]||c;return t?l.a.createElement(u,b(b({ref:n},p),{},{components:t})):l.a.createElement(u,b({ref:n},p))}));function u(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var c=t.length,i=new Array(c);i[0]=d;var b={};for(var r in n)hasOwnProperty.call(n,r)&&(b[r]=n[r]);b.originalType=e,b.mdxType="string"==typeof e?e:a,i[1]=b;for(var p=2;p<c;p++)i[p]=t[p];return l.a.createElement.apply(null,i)}return l.a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},89:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return i})),t.d(n,"metadata",(function(){return b})),t.d(n,"toc",(function(){return r})),t.d(n,"default",(function(){return o}));var a=t(3),l=t(7),c=(t(0),t(106)),i={id:"config",title:"Config reference"},b={unversionedId:"config",id:"config",isDocsHomePage:!1,title:"Config reference",description:"Config schema",source:"@site/docs/config.md",slug:"/config",permalink:"/docs/config",editUrl:"https://github.com/lets-cli/lets/edit/master/docs/docs/config.md",version:"current",sidebar:"someSidebar",previous:{title:"Advanced usage",permalink:"/docs/advanced_usage"},next:{title:"Lets environment",permalink:"/docs/env"}},r=[{value:"Top-level directives:",id:"top-level-directives",children:[{value:"Version",id:"version",children:[]},{value:"Shell",id:"shell",children:[]},{value:"Global env",id:"global-env",children:[]},{value:"Global eval_env",id:"global-eval_env",children:[]},{value:"Global before",id:"global-before",children:[]},{value:"Mixins",id:"mixins",children:[]},{value:"Ignored mixins",id:"ignored-mixins",children:[]},{value:"Commands",id:"commands",children:[]}]},{value:"Command directives:",id:"command-directives",children:[{value:"<code>description</code>",id:"description",children:[]},{value:"<code>cmd</code>",id:"cmd",children:[]},{value:"<code>work_dir</code>",id:"work_dir",children:[]},{value:"<code>shell</code>",id:"shell-1",children:[]},{value:"<code>after</code>",id:"after",children:[]},{value:"<code>depends</code>",id:"depends",children:[]},{value:"<code>options</code>",id:"options",children:[]},{value:"<code>env</code>",id:"env",children:[]},{value:"<code>eval_env</code>",id:"eval_env",children:[]},{value:"<code>checksum</code>",id:"checksum",children:[]},{value:"<code>persist_checksum</code>",id:"persist_checksum",children:[]},{value:"<code>ref</code>",id:"ref",children:[]},{value:"<code>args</code>",id:"args",children:[]}]}],p={toc:r};function o(e){var n=e.components,t=Object(l.a)(e,["components"]);return Object(c.b)("wrapper",Object(a.a)({},p,t,{components:n,mdxType:"MDXLayout"}),Object(c.b)("p",null,"Config schema"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},Object(c.b)("a",{parentName:"li",href:"#shell"},"shell")),Object(c.b)("li",{parentName:"ul"},Object(c.b)("a",{parentName:"li",href:"#mixins"},"mixins")),Object(c.b)("li",{parentName:"ul"},Object(c.b)("a",{parentName:"li",href:"#global-env"},"env")),Object(c.b)("li",{parentName:"ul"},Object(c.b)("a",{parentName:"li",href:"#global-eval_env"},"eval_env")),Object(c.b)("li",{parentName:"ul"},Object(c.b)("a",{parentName:"li",href:"#before"},"before")),Object(c.b)("li",{parentName:"ul"},Object(c.b)("a",{parentName:"li",href:"#commands"},"commands"),Object(c.b)("ul",{parentName:"li"},Object(c.b)("li",{parentName:"ul"},Object(c.b)("a",{parentName:"li",href:"#description"},"description")),Object(c.b)("li",{parentName:"ul"},Object(c.b)("a",{parentName:"li",href:"#cmd"},"cmd")),Object(c.b)("li",{parentName:"ul"},Object(c.b)("a",{parentName:"li",href:"#work_dir"},"work_dir")),Object(c.b)("li",{parentName:"ul"},Object(c.b)("a",{parentName:"li",href:"#after"},"after")),Object(c.b)("li",{parentName:"ul"},Object(c.b)("a",{parentName:"li",href:"#depends"},"depends")),Object(c.b)("li",{parentName:"ul"},Object(c.b)("a",{parentName:"li",href:"#options"},"options")),Object(c.b)("li",{parentName:"ul"},Object(c.b)("a",{parentName:"li",href:"#env"},"env")),Object(c.b)("li",{parentName:"ul"},Object(c.b)("a",{parentName:"li",href:"#eval_env"},"eval_env")),Object(c.b)("li",{parentName:"ul"},Object(c.b)("a",{parentName:"li",href:"#checksum"},"checksum")),Object(c.b)("li",{parentName:"ul"},Object(c.b)("a",{parentName:"li",href:"#persist_checksum"},"persist_checksum")),Object(c.b)("li",{parentName:"ul"},Object(c.b)("a",{parentName:"li",href:"#ref"},"ref")),Object(c.b)("li",{parentName:"ul"},Object(c.b)("a",{parentName:"li",href:"#args"},"args"))))),Object(c.b)("h2",{id:"top-level-directives"},"Top-level directives:"),Object(c.b)("h3",{id:"version"},"Version"),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"key: version")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"type: semver string")),Object(c.b)("p",null,"Specify ",Object(c.b)("strong",{parentName:"p"},"minimum required")," ",Object(c.b)("inlineCode",{parentName:"p"},"lets")," version to run this config."),Object(c.b)("p",null,"Example:"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-yaml"},"version: '0.0.20'\n")),Object(c.b)("h3",{id:"shell"},"Shell"),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"key: shell")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"type: string")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"required: true")),Object(c.b)("p",null,"Specify shell to use when running commands"),Object(c.b)("p",null,"Example:"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-yaml"},"shell: bash\n")),Object(c.b)("h3",{id:"global-env"},"Global env"),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"key: env")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"type: map string => string or map with execution mode")),Object(c.b)("p",null,"Specify global env for all commands."),Object(c.b)("p",null,"Env can be declared as static value or with execution mode:"),Object(c.b)("p",null,"Example:"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-yaml"},'shell: bash\nenv:\n  MY_GLOBAL_ENV: "123"\n  MY_GLOBAL_ENV_2: \n    sh: echo "`id`"\n  MY_GLOBAL_ENV_3:\n    checksum: [Readme.md, package.json]\n')),Object(c.b)("h3",{id:"global-eval_env"},"Global eval_env"),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},Object(c.b)("inlineCode",{parentName:"strong"},"Deprecated"))),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"key: eval_env")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"type: mapping string => string")),Object(c.b)("blockquote",null,Object(c.b)("p",{parentName:"blockquote"},"Since ",Object(c.b)("inlineCode",{parentName:"p"},"env")," now has ",Object(c.b)("inlineCode",{parentName:"p"},"sh")," execution mode, ",Object(c.b)("inlineCode",{parentName:"p"},"eval_env")," is deprecated.")),Object(c.b)("p",null,"Specify global eval_env for all commands."),Object(c.b)("p",null,"Example:"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-yaml"},'shell: bash\neval_env:\n  CURRENT_UID: echo "`id -u`:`id -g`"\n')),Object(c.b)("h3",{id:"global-before"},"Global before"),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"key: before")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"type: string")),Object(c.b)("p",null,"Specify global before script for all commands."),Object(c.b)("p",null,"Example:"),Object(c.b)("p",null,"Run ",Object(c.b)("inlineCode",{parentName:"p"},"redis")," with docker-compose using log level ERROR"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-yaml"},"shell: bash\n\nbefore:\n  function @docker-compose() {\n    docker-compose --log-level ERROR $@\n  }\n\n  export XXX=123\n\ncommands:\n  redis: |\n    echo $XXX\n    @docker-compose up redis\n")),Object(c.b)("h3",{id:"mixins"},"Mixins"),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"key: mixins")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"type: list of string")),Object(c.b)("p",null,"Allows to split ",Object(c.b)("inlineCode",{parentName:"p"},"lets.yaml")," into mixins (mixin config files)."),Object(c.b)("p",null,"To make ",Object(c.b)("inlineCode",{parentName:"p"},"lets.yaml")," small and readable it is convenient to split main config into many smaller ones and include them"),Object(c.b)("p",null,"Example:"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-yaml"},"# in lets.yaml\n...\nshell: bash\nmixins:\n  - test.yaml\n\ncommands:\n  echo:\n    cmd: echo Hi\n    \n# in test.yaml\n...\ncommands:\n  test:\n    cmd: echo Testing...\n")),Object(c.b)("p",null,"And ",Object(c.b)("inlineCode",{parentName:"p"},"lets test")," works fine."),Object(c.b)("h3",{id:"ignored-mixins"},"Ignored mixins"),Object(c.b)("p",null,"It is possible to specify mixin file which could not exist. It is convenient when you have\ngit-ignored file where you write your own commands."),Object(c.b)("p",null,"To make ",Object(c.b)("inlineCode",{parentName:"p"},"lets")," read this mixin just add ",Object(c.b)("inlineCode",{parentName:"p"},"-")," prefix to filename"),Object(c.b)("p",null,"For example:"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-yaml"},"shell: bash\nmixins:\n  - -my.yaml\n")),Object(c.b)("p",null,"Now if ",Object(c.b)("inlineCode",{parentName:"p"},"my.yaml")," exists - it will be loaded as a mixin. If it is not exist - ",Object(c.b)("inlineCode",{parentName:"p"},"lets")," will skip it."),Object(c.b)("h3",{id:"commands"},"Commands"),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"key: commands")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"type: mapping")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"required: true")),Object(c.b)("p",null,"Mapping of all available commands"),Object(c.b)("p",null,"Example:"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-yaml"},"commands:\n  test:\n    description: Test something\n")),Object(c.b)("h2",{id:"command-directives"},"Command directives:"),Object(c.b)("h3",{id:"description"},Object(c.b)("inlineCode",{parentName:"h3"},"description")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"key: description")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"type: string")),Object(c.b)("p",null,"Short description of command - shown in help message"),Object(c.b)("p",null,"Example:"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-yaml"},"commands:\n  test:\n    description: Test something\n")),Object(c.b)("h3",{id:"cmd"},Object(c.b)("inlineCode",{parentName:"h3"},"cmd")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"key: cmd")),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre"},"type: \n  - string\n  - array of strings\n  - map of string => string (experimental)\n")),Object(c.b)("p",null,"Actual command to run in shell."),Object(c.b)("p",null,"Can be either:"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"a string (also a multiline string)"),Object(c.b)("li",{parentName:"ul"},"an array of strings - it will allow to append all arguments passed to command as is (see bellow)"),Object(c.b)("li",{parentName:"ul"},"a map of string => string - this will allow run commands in parallel ",Object(c.b)("inlineCode",{parentName:"li"},"(experimental)"))),Object(c.b)("p",null,"Example single string:"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-yaml"},"commands:\n  test:\n    description: Test something\n    cmd: go test ./... -v\n")),Object(c.b)("p",null,"Example multiline string:"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-yaml"},'commands:\n  test:\n    description: Test something\n    cmd: |\n      echo "Running go tests..."\n      go test ./... -v\n')),Object(c.b)("p",null,"Example array of strings:"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-yaml"},"commands:\n  test:\n    description: Test something\n    cmd: \n      - go\n      - test\n      - ./...\n")),Object(c.b)("p",null,"When run with cmd as array of strings:"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-bash"},"lets test -v\n")),Object(c.b)("p",null,"the ",Object(c.b)("inlineCode",{parentName:"p"},"-v")," will be appended, so the resulting command to run will be ",Object(c.b)("inlineCode",{parentName:"p"},"go test ./... -v")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"cmd")," can be a map ",Object(c.b)("inlineCode",{parentName:"p"},"(it is experimental feature)"),"."),Object(c.b)("p",null,"Example of map of string => string"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-yaml"},"commands:\n  run:\n    description: Test something\n    cmd: \n      app: npm run app\n      nginx: docker-compose up nginx\n      redis: docker-compsoe up redis\n")),Object(c.b)("p",null,"There are two flags ",Object(c.b)("inlineCode",{parentName:"p"},"--only")," and ",Object(c.b)("inlineCode",{parentName:"p"},"--exclude")," you can use with cmd map."),Object(c.b)("p",null,"There must be used before command name:"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-bash"},"lets --only app run\n")),Object(c.b)("h3",{id:"work_dir"},Object(c.b)("inlineCode",{parentName:"h3"},"work_dir")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"key: work_dir")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"type: string")),Object(c.b)("p",null,"Specify work directory to run in. Path must be relative to project root. Be default command's workdir is project root (where lets.yaml located)."),Object(c.b)("p",null,"Example:"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-yaml"},"commands:\n  run-docs:\n    description: Run docusaurus documentation live\n    work_dir: docs\n    cmd: npm start\n")),Object(c.b)("h3",{id:"shell-1"},Object(c.b)("inlineCode",{parentName:"h3"},"shell")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"key: shell")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"type: string")),Object(c.b)("p",null,"Specify shell to run command in."),Object(c.b)("p",null,"Any shell can be used, not only sh-compatible, for example ",Object(c.b)("inlineCode",{parentName:"p"},"python"),"."),Object(c.b)("p",null,"Example:"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-yaml"},"shell: bash\ncommands:\n  run-sh:\n    shell: /bin/sh\n    cmd: echo Hi\n    \n  run-py:\n    shell: python\n    cmd: print('hi')\n")),Object(c.b)("h3",{id:"after"},Object(c.b)("inlineCode",{parentName:"h3"},"after")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"key: after")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"type: string")),Object(c.b)("p",null,"Specify script to run after the actual command. May be useful, when we want to cleanup some resources or stop some services"),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"after")," script is guaranteed to execute if specified, event if ",Object(c.b)("inlineCode",{parentName:"p"},"cmd")," exit code is not ",Object(c.b)("inlineCode",{parentName:"p"},"0")),Object(c.b)("p",null,"Example:"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-yaml"},"commands:\n  redis:\n    description: Run redis\n    cmd: docker-compose up redis\n    after: docker-compose stop redis\n\n  run:\n    description: Run app and services\n    cmd: \n      app: node server.js\n      redis: docker-compose up redis\n    after: |\n      echo Stopping app and redis\n      docker-compose stop redis\n")),Object(c.b)("h3",{id:"depends"},Object(c.b)("inlineCode",{parentName:"h3"},"depends")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"key: depends")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"type: array of string or array or object")),Object(c.b)("p",null,"Specify what commands to run before the actual command. May be useful, when you have one shared command.\nFor example, lets say you have command ",Object(c.b)("inlineCode",{parentName:"p"},"build"),", which builds docker image."),Object(c.b)("p",null,"Example:"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-yaml"},"commands:\n  build:\n    description: Build docker image\n    cmd: docker build -t myimg . -f Dockerfile\n\n  test:\n    description: Test something\n    depends: [build]\n    cmd: go test ./... -v\n\n  fmt:\n    description: Format the code\n    depends: [build]\n    cmd: go fmt\n")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"build")," command will be executed each time you run ",Object(c.b)("inlineCode",{parentName:"p"},"lets test")," or ",Object(c.b)("inlineCode",{parentName:"p"},"lets fmt")),Object(c.b)("h4",{id:"override-arguments-in-depends-command"},"Override arguments in depends command"),Object(c.b)("p",null,"It is possible to override arguments or env for any commands declared in depends."),Object(c.b)("p",null,"For example we want:"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"build")," command to be executed with ",Object(c.b)("inlineCode",{parentName:"li"},"--verbose")," flag in test ",Object(c.b)("inlineCode",{parentName:"li"},"depends"),"."),Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"alarm")," command to be executed with ",Object(c.b)("inlineCode",{parentName:"li"},"Something is happening")," arg and ",Object(c.b)("inlineCode",{parentName:"li"},"LEVEL: INFO")," env in test ",Object(c.b)("inlineCode",{parentName:"li"},"depends"),".")),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-yaml"},"commands:\n  greet:\n    cmd: echo Hi developer\n\n  alarm:\n    options: |\n      Usage: lets alarm <msg>\n    env:\n      LEVEL: DEBUG\n    cmd: echo Alarm ${LETSOPT_MSG}\n\n  build:\n    description: Build docker image\n    options: |\n      lets build [--verbose]\n    cmd: |\n      if [[ -n ${LETSOPT_VERBOSE} ]]; then\n        echo Building docker image\n      fi\n      docker build -t myimg . -f Dockerfile\n\n  test:\n    description: Test something\n    depends:\n      - greet\n      - name: alarm\n        args: Something is happening\n        env:\n          LEVEL: INFO\n      - name: build:\n        args: [--verbose]\n    cmd: go test ./... -v\n")),Object(c.b)("p",null,"Running ",Object(c.b)("inlineCode",{parentName:"p"},"lets test")," will output: "),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-shell"},"# lets test\n# Hi developer\n# Something is happening\n# Building docker image\n# ... continue building docker image\n")),Object(c.b)("h3",{id:"options"},Object(c.b)("inlineCode",{parentName:"h3"},"options")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"key: options")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"type: string (multiline string)")),Object(c.b)("p",null,"One of the most cool things about ",Object(c.b)("inlineCode",{parentName:"p"},"lets")," than it has built in docopt parsing.\nAll you need is to write a valid docopt for a command and lets will parse and inject all values for you."),Object(c.b)("p",null,"More info ",Object(c.b)("a",{parentName:"p",href:"http://docopt.org"},"http://docopt.org")),Object(c.b)("p",null,"When parsed, ",Object(c.b)("inlineCode",{parentName:"p"},"lets")," will provide two kind of env variables:"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"LETSOPT_<VAR>")),Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"LETSCLI_<VAR>"))),Object(c.b)("p",null,"How does it work?"),Object(c.b)("p",null,"Lets see an example:"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-yaml"},"commands:\n  echo-env:\n    description: Echo env vars\n    options:\n      Usage: lets [--log-level=<level>] [--debug] <args>...\n      Options:\n        <args>...       List of required positional args\n        --log-level,-l      Log level\n        --debug,-d      Run with debug\n    cmd: |\n      echo ${LETSOPT_ARGS}\n      app ${LETSCLI_DEBUG}\n")),Object(c.b)("p",null,"So here we have:"),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"args")," - is a list of required positional args"),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"--log-level")," - is a key-value flag, must be provided with some value"),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"--debug")," - is a bool flag, if specified, means true, if no specified means false"),Object(c.b)("p",null,"In the env of ",Object(c.b)("inlineCode",{parentName:"p"},"cmd")," command there will be available two types of env variables:"),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"lets echo-env --log-level=info --debug one two three")),Object(c.b)("p",null,"Parsed and formatted key values"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-bash"},"echo LETSOPT_ARGS=${LETSOPT_ARGS} # LETSOPT_ARGS=one two three\necho LETSOPT_LOG_LEVEL=${LETSOPT_LOG_LEVEL} # LETSOPT_LOG_LEVEL=info\necho LETSOPT_DEBUG=${LETSOPT_DEBUG} # LETSOPT_DEBUG=true\n")),Object(c.b)("p",null,"Raw flags (useful if for example you want to pass ",Object(c.b)("inlineCode",{parentName:"p"},"--debug")," as is)"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-bash"},"echo LETSCLI_ARGS=${LETSCLI_ARGS} # LETSCLI_ARGS=one two three\necho LETSCLI_LOG_LEVEL=${LETSCLI_LOG_LEVEL} # LETSCLI_LOG_LEVEL=--log-level info\necho LETSCLI_DEBUG=${LETSCLI_DEBUG} # LETSCLI_DEBUG=--debug\n")),Object(c.b)("h3",{id:"env"},Object(c.b)("inlineCode",{parentName:"h3"},"env")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"key: env")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"type: mapping string => string or map with execution mode")),Object(c.b)("p",null,"Env is as simple as it sounds. Define additional env for a command: "),Object(c.b)("p",null,"Env can be declared as static value or with execution mode:"),Object(c.b)("p",null,"Example:"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-yaml"},'commands:\n  test:\n    description: Test something\n    env:\n      GO111MODULE: "on"\n      GOPROXY: https://goproxy.io\n      MY_ENV_1:\n        sh: echo "`id`"\n      MY_ENV_2:\n        checksum: [Readme.md, package.json]\n    cmd: go build -o lets *.go\n')),Object(c.b)("h3",{id:"eval_env"},Object(c.b)("inlineCode",{parentName:"h3"},"eval_env")),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},Object(c.b)("inlineCode",{parentName:"strong"},"Deprecated"))),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"key: eval_env")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"type: mapping string => string")),Object(c.b)("blockquote",null,Object(c.b)("p",{parentName:"blockquote"},"Since ",Object(c.b)("inlineCode",{parentName:"p"},"env")," now has ",Object(c.b)("inlineCode",{parentName:"p"},"sh")," execution mode, ",Object(c.b)("inlineCode",{parentName:"p"},"eval_env")," is deprecated.")),Object(c.b)("p",null,"Same as env but allows you to dynamically compute env:"),Object(c.b)("p",null,"Example:"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-yaml"},'commands:\n  test:\n    description: Test something\n    eval_env:\n      CURRENT_UID: echo "`id -u`:`id -g`"\n      CURRENT_USER_NAME: echo "`id -un`"\n    cmd: go build -o lets *.go\n')),Object(c.b)("p",null,"Value will be executed in shell and result will be saved in env."),Object(c.b)("h3",{id:"checksum"},Object(c.b)("inlineCode",{parentName:"h3"},"checksum")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"key: checksum")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"type: array of string | mapping string => array of string")),Object(c.b)("p",null,"Checksum used for computing file hashes. It is useful when you depend on some files content changes."),Object(c.b)("p",null,"In ",Object(c.b)("inlineCode",{parentName:"p"},"checksum")," you can specify:"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"a list of file names "),Object(c.b)("li",{parentName:"ul"},"a list of file regexp patterns (parsed via go ",Object(c.b)("inlineCode",{parentName:"li"},"path/filepath.Glob"),")")),Object(c.b)("p",null,"or"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"a mapping where key is name of env variable and value is:",Object(c.b)("ul",{parentName:"li"},Object(c.b)("li",{parentName:"ul"},"a list of file names "),Object(c.b)("li",{parentName:"ul"},"a list of file regexp patterns (parsed via go ",Object(c.b)("inlineCode",{parentName:"li"},"path/filepath.Glob"),")")))),Object(c.b)("p",null,"Each time a command runs, ",Object(c.b)("inlineCode",{parentName:"p"},"lets")," will calculate the checksum of all files specified in ",Object(c.b)("inlineCode",{parentName:"p"},"checksum"),"."),Object(c.b)("p",null,"Result then can be accessed via ",Object(c.b)("inlineCode",{parentName:"p"},"LETS_CHECKSUM")," env variable."),Object(c.b)("p",null,"If checksum is a mapping, e.g:"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-yaml"},"commands:\n  build:\n    checksum:\n      deps:\n        - package.json\n      doc:\n        - Readme.md\n")),Object(c.b)("p",null,"Resulting env will be:"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"LETS_CHECKSUM_DEPS")," - checksum of deps files"),Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"LETS_CHECKSUM_DOC")," - checksum of doc files"),Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"LETS_CHECKSUM")," - checksum of all checksums (deps and doc)")),Object(c.b)("p",null,"Checksum is calculated with ",Object(c.b)("inlineCode",{parentName:"p"},"sha1"),"."),Object(c.b)("p",null,"If you specify patterns, ",Object(c.b)("inlineCode",{parentName:"p"},"lets")," will try to find all matches and will calculate checksum of that files."),Object(c.b)("p",null,"Example:"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-yaml"},"shell: bash\ncommands:\n  app-build:\n    checksum: \n      - requirements-*.txt\n    cmd: |\n      docker pull myrepo/app:${LETS_CHECKSUM}\n      docker run --rm myrepo/app${LETS_CHECKSUM} python -m app       \n")),Object(c.b)("h3",{id:"persist_checksum"},Object(c.b)("inlineCode",{parentName:"h3"},"persist_checksum")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"key: persist_checksum")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"type: bool")),Object(c.b)("p",null,"This feature is useful when you want to know that something has changed between two executions of a command."),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"persist_checksum")," can be used only if ",Object(c.b)("inlineCode",{parentName:"p"},"checksum")," declared for command."),Object(c.b)("p",null,"If set to ",Object(c.b)("inlineCode",{parentName:"p"},"true"),", each run all calculated checksums will be stored to disk."),Object(c.b)("p",null,"After each subsequent run ",Object(c.b)("inlineCode",{parentName:"p"},"lets")," will check if new checksum and stored checksum are different."),Object(c.b)("p",null,"Result of that check will be exposed via ",Object(c.b)("inlineCode",{parentName:"p"},"LETS_CHECKSUM_CHANGED")," and ",Object(c.b)("inlineCode",{parentName:"p"},"LETS_CHECKSUM_[checksum-name]_CHANGED")," env variables. "),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"IMPORTANT"),": New checksum will override old checksum only if cmd has exit code ",Object(c.b)("strong",{parentName:"p"},"0")," "),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"LETS_CHECKSUM_CHANGED")," will be true after the very first execution, because when you first run command, there is no checksum yet, so we are calculating new checksum - that means that checksum has changed."),Object(c.b)("p",null,"Example:"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-yaml"},"commands:\n  build:\n    persist_checksum: true\n    checksum:\n      deps:\n        - package.json\n      doc:\n        - Readme.md\n")),Object(c.b)("p",null,"Resulting env will be:"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},Object(c.b)("p",{parentName:"li"},Object(c.b)("inlineCode",{parentName:"p"},"LETS_CHECKSUM_DEPS")," - checksum of deps files")),Object(c.b)("li",{parentName:"ul"},Object(c.b)("p",{parentName:"li"},Object(c.b)("inlineCode",{parentName:"p"},"LETS_CHECKSUM_DOC")," - checksum of doc files")),Object(c.b)("li",{parentName:"ul"},Object(c.b)("p",{parentName:"li"},Object(c.b)("inlineCode",{parentName:"p"},"LETS_CHECKSUM")," - checksum of all checksums (deps and doc)")),Object(c.b)("li",{parentName:"ul"},Object(c.b)("p",{parentName:"li"},Object(c.b)("inlineCode",{parentName:"p"},"LETS_CHECKSUM_DEPS_CHANGED")," - is checksum of deps files changed")),Object(c.b)("li",{parentName:"ul"},Object(c.b)("p",{parentName:"li"},Object(c.b)("inlineCode",{parentName:"p"},"LETS_CHECKSUM_DOC_CHANGED")," - is checksum of doc files changed")),Object(c.b)("li",{parentName:"ul"},Object(c.b)("p",{parentName:"li"},Object(c.b)("inlineCode",{parentName:"p"},"LETS_CHECKSUM_CHANGED")," - is checksum of all checksums (deps and doc) changed"))),Object(c.b)("h3",{id:"ref"},Object(c.b)("inlineCode",{parentName:"h3"},"ref")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"key: ref")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"type: string")),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},Object(c.b)("inlineCode",{parentName:"strong"},"Experimental feature"))),Object(c.b)("p",null,"NOTE: ",Object(c.b)("inlineCode",{parentName:"p"},"ref")," is not compatible (yet) with any directives except ",Object(c.b)("inlineCode",{parentName:"p"},"args"),". Actually ",Object(c.b)("inlineCode",{parentName:"p"},"ref")," is a special syntax that turns command into reference to command. It may be changed in the future."),Object(c.b)("p",null,"Allows to run command with predefined arguments. Before this was implemented, if you had some commmand and wanted same command but with some predefined args, you had to use so called ",Object(c.b)("inlineCode",{parentName:"p"},"lets-in-lets")," hack."),Object(c.b)("p",null,"Before:"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-yaml"},"commands:\n  ls:\n    cmd: [ls]\n\n  ls-table:\n    cmd: lets ls -l\n")),Object(c.b)("p",null,"Now:"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-yaml"},"commands:\n  ls:\n    cmd: [ls]\n\n  ls-table:\n    ref: ls\n    args: -l\n")),Object(c.b)("h3",{id:"args"},Object(c.b)("inlineCode",{parentName:"h3"},"args")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"key: args")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"type: string")),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},Object(c.b)("inlineCode",{parentName:"strong"},"Experimental feature"))),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"args")," is used only with ",Object(c.b)("a",{parentName:"p",href:"#ref"},"ref")," and allows to set additional positional args to referenced command. See ",Object(c.b)("a",{parentName:"p",href:"#ref"},"ref")," example."))}o.isMDXComponent=!0}}]);