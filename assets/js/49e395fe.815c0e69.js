"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[274],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return d}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=c(n),d=o,f=m["".concat(s,".").concat(d)]||m[d]||u[d]||i;return n?r.createElement(f,a(a({ref:t},p),{},{components:n})):r.createElement(f,a({ref:t},p))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,a[1]=l;for(var c=2;c<i;c++)a[c]=n[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},2145:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return s},default:function(){return d},frontMatter:function(){return l},metadata:function(){return c},toc:function(){return u}});var r=n(7462),o=n(3366),i=(n(7294),n(3905)),a=["components"],l={id:"ide_support",title:"IDE/Text editors support"},s=void 0,c={unversionedId:"ide_support",id:"ide_support",title:"IDE/Text editors support",description:"Jet Brains plugin (official)",source:"@site/docs/ide_support.md",sourceDirName:".",slug:"/ide_support",permalink:"/docs/ide_support",draft:!1,editUrl:"https://github.com/lets-cli/lets/edit/master/docs/docs/ide_support.md",tags:[],version:"current",frontMatter:{id:"ide_support",title:"IDE/Text editors support"},sidebar:"someSidebar",previous:{title:"Changelog",permalink:"/docs/changelog"},next:{title:"Architecture",permalink:"/docs/architecture"}},p={},u=[{value:"Jet Brains plugin (official)",id:"jet-brains-plugin-official",level:3},{value:"Emacs plugin (community)",id:"emacs-plugin-community",level:3},{value:"JSON Schema",id:"json-schema",level:3},{value:"VSCode",id:"vscode",level:4},{value:"Neovim",id:"neovim",level:4}],m={toc:u};function d(e){var t=e.components,n=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h3",{id:"jet-brains-plugin-official"},"Jet Brains plugin (official)"),(0,i.kt)("p",null,"Provides autocomplete and filetype support."),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://plugins.jetbrains.com/plugin/14639-lets"},"Plugin site")),(0,i.kt)("h3",{id:"emacs-plugin-community"},"Emacs plugin (community)"),(0,i.kt)("p",null,"Provides autocomplete and filetype support."),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/mpanarin/lets-mode"},"Plugin site")),(0,i.kt)("h3",{id:"json-schema"},"JSON Schema"),(0,i.kt)("p",null,"In order to get autocomplete and filetype support in any editor, you can use the JSON schema file provided by Lets."),(0,i.kt)("h4",{id:"vscode"},"VSCode"),(0,i.kt)("p",null,"To use the JSON schema in VSCode, you can use the ",(0,i.kt)("a",{parentName:"p",href:"https://marketplace.visualstudio.com/items?itemName=redhat.vscode-yaml"},"YAML extension"),"."),(0,i.kt)("p",null,"Add the following to your ",(0,i.kt)("inlineCode",{parentName:"p"},"settings.json"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "yaml.schemas": {\n    "https://lets-cli.org/schema.json": [\n      "**/lets.yaml",\n      "**/lets*.yaml",\n    ]\n  }\n}\n')),(0,i.kt)("h4",{id:"neovim"},"Neovim"),(0,i.kt)("p",null,"To use the JSON schema in Neovim, you can use the ",(0,i.kt)("inlineCode",{parentName:"p"},"nvim-lspconfig")," with ",(0,i.kt)("inlineCode",{parentName:"p"},"SchemaStore")," plugin."),(0,i.kt)("p",null,"In your ",(0,i.kt)("inlineCode",{parentName:"p"},"nvim-lspconfig")," configuration, add the following:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'servers = {\n  yamlls = {\n    on_new_config = function(new_config)\n      local yaml_schemas = require("schemastore").yaml.schemas({\n        extra = {\n          {\n            description = "Lets JSON schema",\n            fileMatch = { "lets.yaml", "lets*.yaml" },\n            name = "lets.schema.json",\n            url = "https://lets-cli.org/schema.json",\n          },\n        },\n      })\n      new_config.settings.yaml.schemas = vim.tbl_deep_extend("force", new_config.settings.yaml.schemas or {}, yaml_schemas)\n    end,\n  },\n}\n')))}d.isMDXComponent=!0}}]);