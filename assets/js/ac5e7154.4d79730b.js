"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[258],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return d}});var i=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=i.createContext({}),c=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=c(e.components);return i.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},u=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=c(n),d=a,k=u["".concat(s,".").concat(d)]||u[d]||m[d]||r;return n?i.createElement(k,l(l({ref:t},p),{},{components:n})):i.createElement(k,l({ref:t},p))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,l=new Array(r);l[0]=u;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var c=2;c<r;c++)l[c]=n[c];return i.createElement.apply(null,l)}return i.createElement.apply(null,n)}u.displayName="MDXCreateElement"},8494:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return s},default:function(){return d},frontMatter:function(){return o},metadata:function(){return c},toc:function(){return m}});var i=n(7462),a=n(3366),r=(n(7294),n(3905)),l=["components"],o={id:"best_practices",title:"Best practices"},s=void 0,c={unversionedId:"best_practices",id:"best_practices",title:"Best practices",description:"Naming conventions",source:"@site/docs/best_practices.md",sourceDirName:".",slug:"/best_practices",permalink:"/docs/best_practices",draft:!1,editUrl:"https://github.com/lets-cli/lets/edit/master/docs/docs/best_practices.md",tags:[],version:"current",frontMatter:{id:"best_practices",title:"Best practices"},sidebar:"mySidebar",previous:{title:"Example for JavaScript/Node.js",permalink:"/docs/example_js"},next:{title:"Changelog",permalink:"/docs/changelog"}},p={},m=[{value:"Naming conventions",id:"naming-conventions",level:3},{value:"Default commands",id:"default-commands",level:3},{value:"Split <code>lets.yaml</code> when it becomes big.",id:"split-letsyaml-when-it-becomes-big",level:3},{value:"Use checskums",id:"use-checskums",level:3},{value:"Initialize project using <code>init</code>",id:"initialize-project-using-init",level:3}],u={toc:m};function d(e){var t=e.components,n=(0,a.Z)(e,l);return(0,r.kt)("wrapper",(0,i.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h3",{id:"naming-conventions"},"Naming conventions"),(0,r.kt)("p",null,"Prefer single word over plural."),(0,r.kt)("p",null,"It is better to leverage semantics of ",(0,r.kt)("inlineCode",{parentName:"p"},"lets")," as an intention to do something. For example it is natural saying ",(0,r.kt)("inlineCode",{parentName:"p"},"lets test")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"lets build")," something."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"bad")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"lets runs\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"good")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"lets run\n")),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"bad")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"lets tests\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"good")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"lets test\n")),(0,r.kt)("h3",{id:"default-commands"},"Default commands"),(0,r.kt)("p",null,"If you have many projects (lets say - microservices) - it would be great to have one way to run and operate them when developing"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"run")," command - the main purpouse of this command is to run all in once. If all projects has this command its easier to remember."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"test")," command - each projects should have a tests and a way to run them, either one file or all tests at once"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"init")," command - some kind of project initialization - creates missing files, dirs for developer, checks permissions, login to docker registry, checks inotify limits for tools such as webpack and other file watchers.")),(0,r.kt)("h3",{id:"split-letsyaml-when-it-becomes-big"},"Split ",(0,r.kt)("inlineCode",{parentName:"h3"},"lets.yaml")," when it becomes big."),(0,r.kt)("p",null,"If ",(0,r.kt)("inlineCode",{parentName:"p"},"lets.yaml")," became big, it may be great to split it in a smaller, more specific files using ",(0,r.kt)("inlineCode",{parentName:"p"},"mixins")," directive.\nFor example:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"lets.yaml"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"lets.test.yaml"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"lets.build.yaml"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"lets.frontend.yaml"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"lets.i18n.yaml")))),(0,r.kt)("p",null,"In each of these files we then hold all specific tasks."),(0,r.kt)("h3",{id:"use-checskums"},"Use checskums"),(0,r.kt)("p",null,"Checksums can help you decrease amount of task executions. How ? Lets see."),(0,r.kt)("p",null,"Suppose we have ",(0,r.kt)("inlineCode",{parentName:"p"},"js")," project and we obviously holding all dependencies in ",(0,r.kt)("inlineCode",{parentName:"p"},"package.json"),".\nAlso we are using Docker for reproducible development environment."),(0,r.kt)("p",null,"Dockerfile"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'FROM alpine:3.8\n\nWORKDIR /work\n\nCOPY package.json .\n\nRUN npm install\n\nCMD ["npm start"]\n')),(0,r.kt)("p",null,"What if we want to rebuild docker image every time we changed dependency ?"),(0,r.kt)("p",null,"lets.yaml"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"shell: bash\n\ncommands:\n  run:\n    depends: \n      - build\n    cmd: docker-compose up application\n\n  build:\n    checksum:\n      - package.json\n    persist_checksum: true  \n    cmd: |\n      if [[ ${LETS_CHECKSUM_CHANGED} == true ]]; then \n        docker-compose build application\n      else\n        Image is up to date\n      fi\n")),(0,r.kt)("p",null,"As you can see, we execute ",(0,r.kt)("inlineCode",{parentName:"p"},"build")," command each time we execute ",(0,r.kt)("inlineCode",{parentName:"p"},"run")," command (",(0,r.kt)("inlineCode",{parentName:"p"},"depends"),")."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"persist_checksum")," will save calculated checksum to ",(0,r.kt)("inlineCode",{parentName:"p"},".lets")," directory and all subsequent calls of ",(0,r.kt)("inlineCode",{parentName:"p"},"build")," command will\nread checksum from disk, calculate new checksum, and compare them. If ",(0,r.kt)("inlineCode",{parentName:"p"},"package.json")," will change - we will rebuild the image."),(0,r.kt)("h3",{id:"initialize-project-using-init"},"Initialize project using ",(0,r.kt)("inlineCode",{parentName:"h3"},"init")),(0,r.kt)("p",null,"You can use ",(0,r.kt)("inlineCode",{parentName:"p"},"init")," keyword to write a script that will do some initialization on lets startup, like creating some dirs, configs or installing project dependencies."),(0,r.kt)("p",null,"By default, ",(0,r.kt)("inlineCode",{parentName:"p"},"init")," runs each time the ",(0,r.kt)("inlineCode",{parentName:"p"},"lets")," program is executed."),(0,r.kt)("p",null,"You can make ",(0,r.kt)("inlineCode",{parentName:"p"},"init")," conditional, by simply creating a file and checking if it exists at the start of ",(0,r.kt)("inlineCode",{parentName:"p"},"init")," script."),(0,r.kt)("p",null,"Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'shell: bash\n\ninit: |\n  if [[ ! -f .lets/init_done ]]; then\n    echo "calling init script"\n    touch .lets/init_done\n  fi\n')),(0,r.kt)("p",null,"In this example we are checking for ",(0,r.kt)("inlineCode",{parentName:"p"},".lets/init_done")," file existence. If it does not exist, we will call init script and create ",(0,r.kt)("inlineCode",{parentName:"p"},"init_done")," file as a marker of successfull init script invocation."),(0,r.kt)("p",null,"We are using ",(0,r.kt)("inlineCode",{parentName:"p"},".lets")," dir here because this dir will be created by ",(0,r.kt)("inlineCode",{parentName:"p"},"lets")," itself and is generally a good place to create such files, but you are free to create files with any name and in any directory you want."))}d.isMDXComponent=!0}}]);