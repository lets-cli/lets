"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[618],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=p(n),m=a,v=d["".concat(s,".").concat(m)]||d[m]||c[m]||l;return n?r.createElement(v,o(o({ref:t},u),{},{components:n})):r.createElement(v,o({ref:t},u))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,o=new Array(l);o[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:a,o[1]=i;for(var p=2;p<l;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},7857:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return s},default:function(){return m},frontMatter:function(){return i},metadata:function(){return p},toc:function(){return c}});var r=n(7462),a=n(3366),l=(n(7294),n(3905)),o=["components"],i={id:"development",title:"Development"},s=void 0,p={unversionedId:"development",id:"development",title:"Development",description:"Build",source:"@site/docs/development.md",sourceDirName:".",slug:"/development",permalink:"/docs/development",draft:!1,editUrl:"https://github.com/lets-cli/lets/edit/master/docs/docs/development.md",tags:[],version:"current",frontMatter:{id:"development",title:"Development"},sidebar:"someSidebar",previous:{title:"Architecture",permalink:"/docs/architecture"},next:{title:"Contribute",permalink:"/docs/contribute"}},u={},c=[{value:"Build",id:"build",level:2},{value:"Test",id:"test",level:2},{value:"Release",id:"release",level:2},{value:"Prerelease",id:"prerelease",level:3},{value:"Versioning",id:"versioning",level:2}],d={toc:c};function m(e){var t=e.components,n=(0,a.Z)(e,o);return(0,l.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"build"},"Build"),(0,l.kt)("p",null,"We are suggesting to use ",(0,l.kt)("inlineCode",{parentName:"p"},"lets-dev")," name for development binary, so you could\nhave stable ",(0,l.kt)("inlineCode",{parentName:"p"},"lets")," version untouched."),(0,l.kt)("p",null,"To build a binary:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"go build -o lets-dev *.go\n")),(0,l.kt)("p",null,"To install in system"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"go build -o lets-dev *.go && sudo mv ./lets-dev /usr/local/bin/lets-dev\n")),(0,l.kt)("p",null,"Or if you already have ",(0,l.kt)("inlineCode",{parentName:"p"},"lets")," installed in your system:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"lets build-and-install [--path=<path>]\n")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"path")," - your custom executable $PATH, defaults to ",(0,l.kt)("inlineCode",{parentName:"p"},"/usr/local/bin")),(0,l.kt)("p",null,"After install - check version of lets - ",(0,l.kt)("inlineCode",{parentName:"p"},"lets-dev --version")," - it should be development"),(0,l.kt)("p",null,"It will install ",(0,l.kt)("inlineCode",{parentName:"p"},"lets-dev")," to /usr/local/bin/lets-dev, or wherever you`ve specified in path, and set version to development with current tag and timestamp"),(0,l.kt)("h2",{id:"test"},"Test"),(0,l.kt)("p",null,"To run all tests:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"lets test\n")),(0,l.kt)("p",null,"To run unit tests:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"lets test-unit\n")),(0,l.kt)("p",null,"To get coverage:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"lets coverage\n")),(0,l.kt)("p",null,"To test ",(0,l.kt)("inlineCode",{parentName:"p"},"lets")," output we are using ",(0,l.kt)("inlineCode",{parentName:"p"},"bats")," - bash automated testing:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"lets test-bats\n\n# or run one test\n\nlets test-bats global_env.bats\n")),(0,l.kt)("h2",{id:"release"},"Release"),(0,l.kt)("p",null,"To release a new version:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'lets release 0.0.1 -m "implement some new feature"\n')),(0,l.kt)("p",null,"This will create an annotated tag with 0.0.1 and run ",(0,l.kt)("inlineCode",{parentName:"p"},"git push --tags")),(0,l.kt)("h3",{id:"prerelease"},"Prerelease"),(0,l.kt)("p",null,"If you are not ready to release a new version yet, it is possible to create a prerelease version."),(0,l.kt)("p",null,"Prerelease version is no visible to ",(0,l.kt)("inlineCode",{parentName:"p"},"install.sh")," script and you can be sure that no one will get this version accidentiall."),(0,l.kt)("p",null,"Also you do not need to revoke published version if it has some critical bugs."),(0,l.kt)("p",null,"To create a prerelease version you need to append a ",(0,l.kt)("inlineCode",{parentName:"p"},"-rcN")," suffix to next version, for example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'lets release 0.0.1-rc1 -m "pre: implement some new feature"\n')),(0,l.kt)("p",null,"This will create a ",(0,l.kt)("inlineCode",{parentName:"p"},"0.0.1-rc1")," tag and push it to github. Github will create a prerelease version and build all the binaries."),(0,l.kt)("p",null,"Once you are ready to release a new version, just create a normal release:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'lets release 0.0.1 -m "implement some new feature"\n')),(0,l.kt)("h2",{id:"versioning"},"Versioning"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"lets")," releases must be backward compatible. That means every new ",(0,l.kt)("inlineCode",{parentName:"p"},"lets")," release must work with old configs."),(0,l.kt)("p",null,"For situations like e.g. new functionality, there is a ",(0,l.kt)("inlineCode",{parentName:"p"},"version")," in ",(0,l.kt)("inlineCode",{parentName:"p"},"lets.yaml")," which specifies ",(0,l.kt)("strong",{parentName:"p"},"minimum required")," ",(0,l.kt)("inlineCode",{parentName:"p"},"lets")," version."),(0,l.kt)("p",null,"If ",(0,l.kt)("inlineCode",{parentName:"p"},"lets")," version installed on the user machine is less than the one specified in config it will show and error and ask the user to upgrade ",(0,l.kt)("inlineCode",{parentName:"p"},"lets")," version."))}m.isMDXComponent=!0}}]);