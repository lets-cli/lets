"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[274],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return d}});var l=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);t&&(l=l.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,l)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,l,i=function(e,t){if(null==e)return{};var n,l,i={},a=Object.keys(e);for(l=0;l<a.length;l++)n=a[l],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(l=0;l<a.length;l++)n=a[l],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=l.createContext({}),p=function(e){var t=l.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},c=function(e){var t=p(e.components);return l.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return l.createElement(l.Fragment,{},t)}},m=l.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),m=p(n),d=i,f=m["".concat(s,".").concat(d)]||m[d]||u[d]||a;return n?l.createElement(f,r(r({ref:t},c),{},{components:n})):l.createElement(f,r({ref:t},c))}));function d(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,r=new Array(a);r[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:i,r[1]=o;for(var p=2;p<a;p++)r[p]=n[p];return l.createElement.apply(null,r)}return l.createElement.apply(null,n)}m.displayName="MDXCreateElement"},2145:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return s},default:function(){return d},frontMatter:function(){return o},metadata:function(){return p},toc:function(){return u}});var l=n(7462),i=n(3366),a=(n(7294),n(3905)),r=["components"],o={id:"ide_support",title:"IDE/Text editors support"},s=void 0,p={unversionedId:"ide_support",id:"ide_support",title:"IDE/Text editors support",description:"Jet Brains plugin (official)",source:"@site/docs/ide_support.md",sourceDirName:".",slug:"/ide_support",permalink:"/docs/ide_support",draft:!1,editUrl:"https://github.com/lets-cli/lets/edit/master/docs/docs/ide_support.md",tags:[],version:"current",frontMatter:{id:"ide_support",title:"IDE/Text editors support"},sidebar:"mySidebar",previous:{title:"Changelog",permalink:"/docs/changelog"},next:{title:"Architecture",permalink:"/docs/architecture"}},c={},u=[{value:"Jet Brains plugin (official)",id:"jet-brains-plugin-official",level:3},{value:"VSCode plugin (official)",id:"vscode-plugin-official",level:3},{value:"Emacs plugin (community)",id:"emacs-plugin-community",level:3},{value:"LSP",id:"lsp",level:3},{value:"VSCode",id:"vscode",level:4},{value:"Neovim",id:"neovim",level:4},{value:"JSON Schema",id:"json-schema",level:3},{value:"VSCode",id:"vscode-1",level:4},{value:"Neovim",id:"neovim-1",level:4}],m={toc:u};function d(e){var t=e.components,n=(0,i.Z)(e,r);return(0,a.kt)("wrapper",(0,l.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h3",{id:"jet-brains-plugin-official"},"Jet Brains plugin (official)"),(0,a.kt)("p",null,"Provides autocomplete and filetype support."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://plugins.jetbrains.com/plugin/14639-lets"},"Plugin site")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://github.com/lets-cli/intellij-lets"},"Plugin repo"))),(0,a.kt)("h3",{id:"vscode-plugin-official"},"VSCode plugin (official)"),(0,a.kt)("p",null,"Provides autocomplete and filetype support."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://marketplace.visualstudio.com/items?itemName=kindritskyimax.vscode-lets"},"Plugin site")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://github.com/lets-cli/vscode-lets"},"Plugin repo"))),(0,a.kt)("h3",{id:"emacs-plugin-community"},"Emacs plugin (community)"),(0,a.kt)("p",null,"Provides autocomplete and filetype support."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://github.com/mpanarin/lets-mode"},"Plugin repo"))),(0,a.kt)("h3",{id:"lsp"},"LSP"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"LSP")," stands for ",(0,a.kt)("inlineCode",{parentName:"p"},"Language Server Protocol")),(0,a.kt)("p",null,"Starting from ",(0,a.kt)("inlineCode",{parentName:"p"},"0.0.55")," version lets comes with builtin ",(0,a.kt)("inlineCode",{parentName:"p"},"lsp")," server under ",(0,a.kt)("inlineCode",{parentName:"p"},"lets self lsp")," command."),(0,a.kt)("p",null,"Lsp support includes:"),(0,a.kt)("ul",{className:"contains-task-list"},(0,a.kt)("li",{parentName:"ul",className:"task-list-item"},(0,a.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","Goto definition",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Navigate to definitions of mixins files"),(0,a.kt)("li",{parentName:"ul"},"Navigate to definitions of command from ",(0,a.kt)("inlineCode",{parentName:"li"},"depends")))),(0,a.kt)("li",{parentName:"ul",className:"task-list-item"},(0,a.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","Completion",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Complete commands in depends"))),(0,a.kt)("li",{parentName:"ul",className:"task-list-item"},(0,a.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","Diagnostics"),(0,a.kt)("li",{parentName:"ul",className:"task-list-item"},(0,a.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","Hover"),(0,a.kt)("li",{parentName:"ul",className:"task-list-item"},(0,a.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","Formatting"),(0,a.kt)("li",{parentName:"ul",className:"task-list-item"},(0,a.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","Signature help"),(0,a.kt)("li",{parentName:"ul",className:"task-list-item"},(0,a.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","Code action")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"lsp")," server works with JSON Schema (see bellow)."),(0,a.kt)("h4",{id:"vscode"},"VSCode"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"#vscode-plugin-official"},"VSCode plugin")," supports lsp out of the box, just make sure you have lets >= ",(0,a.kt)("inlineCode",{parentName:"p"},"0.0.55"),"."),(0,a.kt)("h4",{id:"neovim"},"Neovim"),(0,a.kt)("p",null,"Neovim support for ",(0,a.kt)("inlineCode",{parentName:"p"},"lets self lsp")," can be added manually:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Add new filetype:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'vim.filetype.add({\n  filename = {\n    ["lets.yaml"] = "yaml.lets",\n  },\n})\n')),(0,a.kt)("ol",{start:2},(0,a.kt)("li",{parentName:"ol"},"In your ",(0,a.kt)("inlineCode",{parentName:"li"},"neovim/nvim-lspconfig")," servers configuration:")),(0,a.kt)("p",null,"In order for ",(0,a.kt)("inlineCode",{parentName:"p"},"nvim-lspconfig")," to recognize ",(0,a.kt)("inlineCode",{parentName:"p"},"lets lsp")," we must define config for ",(0,a.kt)("inlineCode",{parentName:"p"},"lets_ls")," (lets_ls is just a conventional name because we are not officially added to ",(0,a.kt)("inlineCode",{parentName:"p"},"neovim/nvim-lspconfig"),")"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'require("lspconfig.configs").lets_ls = {\n  default_config = {\n    cmd = { \n      "lets self lsp",\n    },\n    filetypes = { "yaml.lets" },\n    root_dir = util.root_pattern("lets.yaml"),\n    settings = {},\n  },\n}\n')),(0,a.kt)("ol",{start:3},(0,a.kt)("li",{parentName:"ol"},"And then enable lets_ls in then servers section:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'return {\n  "neovim/nvim-lspconfig",\n  opts = {\n    servers = {\n      lets_ls = {},\n      pyright = {},  -- pyright here just as hint to where we should add lets_ls\n    },\n  },\n}\n')),(0,a.kt)("h3",{id:"json-schema"},"JSON Schema"),(0,a.kt)("p",null,"In order to get autocomplete and filetype support in any editor, you can use the JSON schema file provided by Lets."),(0,a.kt)("h4",{id:"vscode-1"},"VSCode"),(0,a.kt)("p",null,"To use the JSON schema in VSCode, you can use the ",(0,a.kt)("a",{parentName:"p",href:"https://marketplace.visualstudio.com/items?itemName=redhat.vscode-yaml"},"YAML extension"),"."),(0,a.kt)("p",null,"Add the following to your ",(0,a.kt)("inlineCode",{parentName:"p"},"settings.json"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "yaml.schemas": {\n    "https://lets-cli.org/schema.json": [\n      "**/lets.yaml",\n      "**/lets*.yaml",\n    ]\n  }\n}\n')),(0,a.kt)("h4",{id:"neovim-1"},"Neovim"),(0,a.kt)("p",null,"To use the JSON schema in Neovim, you can use the ",(0,a.kt)("inlineCode",{parentName:"p"},"nvim-lspconfig")," with ",(0,a.kt)("inlineCode",{parentName:"p"},"SchemaStore")," plugin."),(0,a.kt)("p",null,"In your ",(0,a.kt)("inlineCode",{parentName:"p"},"nvim-lspconfig")," configuration, add the following:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'servers = {\n  yamlls = {\n    on_new_config = function(new_config)\n      local yaml_schemas = require("schemastore").yaml.schemas({\n        extra = {\n          {\n            description = "Lets JSON schema",\n            fileMatch = { "lets.yaml", "lets*.yaml" },\n            name = "lets.schema.json",\n            url = "https://lets-cli.org/schema.json",\n          },\n        },\n      })\n      new_config.settings.yaml.schemas = vim.tbl_deep_extend("force", new_config.settings.yaml.schemas or {}, yaml_schemas)\n    end,\n  },\n}\n')))}d.isMDXComponent=!0}}]);