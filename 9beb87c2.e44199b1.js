(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{106:function(e,n,t){"use strict";t.d(n,"a",(function(){return d})),t.d(n,"b",(function(){return u}));var a=t(0),r=t.n(a);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function c(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?c(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):c(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var b=r.a.createContext({}),p=function(e){var n=r.a.useContext(b),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},d=function(e){var n=p(e.components);return r.a.createElement(b.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.a.createElement(r.a.Fragment,{},n)}},s=r.a.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,b=o(e,["components","mdxType","originalType","parentName"]),d=p(t),s=a,u=d["".concat(c,".").concat(s)]||d[s]||m[s]||i;return t?r.a.createElement(u,l(l({ref:n},b),{},{components:t})):r.a.createElement(u,l({ref:n},b))}));function u(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,c=new Array(i);c[0]=s;var l={};for(var o in n)hasOwnProperty.call(n,o)&&(l[o]=n[o]);l.originalType=e,l.mdxType="string"==typeof e?e:a,c[1]=l;for(var b=2;b<i;b++)c[b]=t[b];return r.a.createElement.apply(null,c)}return r.a.createElement.apply(null,t)}s.displayName="MDXCreateElement"},93:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return c})),t.d(n,"metadata",(function(){return l})),t.d(n,"toc",(function(){return o})),t.d(n,"default",(function(){return p}));var a=t(3),r=t(7),i=(t(0),t(106)),c={id:"changelog",title:"Changelog"},l={unversionedId:"changelog",id:"changelog",isDocsHomePage:!1,title:"Changelog",description:"[Unreleased]",source:"@site/docs/changelog.md",slug:"/changelog",permalink:"/docs/changelog",editUrl:"https://github.com/lets-cli/lets/edit/master/docs/docs/changelog.md",version:"current",sidebar:"someSidebar",previous:{title:"Best practices",permalink:"/docs/best_practices"},next:{title:"IDE/Text editors support",permalink:"/docs/ide_support"}},o=[{value:"Unreleased",id:"unreleased",children:[]},{value:"0.0.40",id:"0040",children:[]},{value:"0.0.33",id:"0033",children:[]},{value:"0.0.32",id:"0032",children:[]},{value:"0.0.30",id:"0030",children:[]},{value:"0.0.29",id:"0029",children:[]},{value:"0.0.28",id:"0028",children:[]},{value:"0.0.27",id:"0027",children:[]}],b={toc:o};function p(e){var n=e.components,t=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},b,t,{components:n,mdxType:"MDXLayout"}),Object(i.b)("h2",{id:"unreleased"},"[Unreleased]"),Object(i.b)("h2",{id:"0040"},Object(i.b)("a",{parentName:"h2",href:"https://github.com/lets-cli/lets/releases/tag/v0.0.40"},"0.0.40")),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"[Added]"," Allow override command arguments and env when using command in ",Object(i.b)("inlineCode",{parentName:"p"},"depends")),Object(i.b)("p",{parentName:"li"}," See example ",Object(i.b)("a",{parentName:"p",href:"/docs/config#override-arguments-in-depends-command"},"in config docs"))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"[Added]"," Validate if commands declared in ",Object(i.b)("inlineCode",{parentName:"p"},"depends")," actually exist.")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"[Refactoring]"," Refactored ",Object(i.b)("inlineCode",{parentName:"p"},"runner")," package, implemented ",Object(i.b)("inlineCode",{parentName:"p"},"Runner")," struct.")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"[Added]"," Support ",Object(i.b)("inlineCode",{parentName:"p"},"NO_COLOR")," env variable to disable colored output. See ",Object(i.b)("a",{parentName:"p",href:"https://no-color.org/"},"https://no-color.org/"))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"[Added]"," ",Object(i.b)("inlineCode",{parentName:"p"},"LETS_COMMAND_ARGS")," - will contain command's positional args. ",Object(i.b)("a",{parentName:"p",href:"/docs/env#default-environment-variables"},"See config"),"."),Object(i.b)("p",{parentName:"li"},"Also, special bash env variables such as ",Object(i.b)("inlineCode",{parentName:"p"},'"$@"')," and ",Object(i.b)("inlineCode",{parentName:"p"},'"$1"')," etc. now available inside ",Object(i.b)("inlineCode",{parentName:"p"},"cmd")," script and work as expected. ")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"[Added]"," ",Object(i.b)("inlineCode",{parentName:"p"},"work_dir")," directive for command. See ",Object(i.b)("a",{parentName:"p",href:"/docs/config#work_dir"},"config"))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"[Added]"," ",Object(i.b)("inlineCode",{parentName:"p"},"shell")," directive for command. See ",Object(i.b)("a",{parentName:"p",href:"/docs/config#shell-1"},"config"))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"[Added]"," ",Object(i.b)("inlineCode",{parentName:"p"},"--init")," flag. Run ",Object(i.b)("inlineCode",{parentName:"p"},"lets --init")," to create new ",Object(i.b)("inlineCode",{parentName:"p"},"lets.yaml")," with example command")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"[Refactoring]"," updated ",Object(i.b)("inlineCode",{parentName:"p"},"bats")," test framework and adjusted all bats tests ")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"[Added]"," ",Object(i.b)("inlineCode",{parentName:"p"},"ref")," directive to ",Object(i.b)("inlineCode",{parentName:"p"},"command"),". Allows to declare existing command with predefined args ",Object(i.b)("a",{parentName:"p",href:"/docs/config#ref"},"See config"),".")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"[Added]"," ",Object(i.b)("inlineCode",{parentName:"p"},"sh")," and ",Object(i.b)("inlineCode",{parentName:"p"},"checksum")," execution modes for global level ",Object(i.b)("inlineCode",{parentName:"p"},"env")," and command level ",Object(i.b)("inlineCode",{parentName:"p"},"env")," ",Object(i.b)("a",{parentName:"p",href:"/docs/config#env"},"See config"),".\n",Object(i.b)("inlineCode",{parentName:"p"},"eval_env")," is deprecated now, since ",Object(i.b)("inlineCode",{parentName:"p"},"env")," with ",Object(i.b)("inlineCode",{parentName:"p"},"sh")," execution mode does exactly the same"))),Object(i.b)("h2",{id:"0033"},Object(i.b)("a",{parentName:"h2",href:"https://github.com/lets-cli/lets/releases/tag/v0.0.33"},"0.0.33")),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"[Added]"," Allow templating in command ",Object(i.b)("inlineCode",{parentName:"li"},"options")," directive ",Object(i.b)("a",{parentName:"li",href:"/docs/advanced_usage#command-templates"},"docs"))),Object(i.b)("h2",{id:"0032"},Object(i.b)("a",{parentName:"h2",href:"https://github.com/lets-cli/lets/releases/tag/v0.0.32"},"0.0.32")),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"[Fixed]"," Publish lets to homebrew")),Object(i.b)("h2",{id:"0030"},Object(i.b)("a",{parentName:"h2",href:"https://github.com/lets-cli/lets/releases/tag/v0.0.30"},"0.0.30")),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"[Added]"," Build ",Object(i.b)("inlineCode",{parentName:"li"},"lets")," for ",Object(i.b)("inlineCode",{parentName:"li"},"arm64 (M1)")," arch"),Object(i.b)("li",{parentName:"ul"},"[Deleted]"," Drop ",Object(i.b)("inlineCode",{parentName:"li"},"386")," arch builds"),Object(i.b)("li",{parentName:"ul"},"[Added]"," Publish ",Object(i.b)("inlineCode",{parentName:"li"},"lets")," to homebrew"),Object(i.b)("li",{parentName:"ul"},"[Added]"," ",Object(i.b)("inlineCode",{parentName:"li"},"--upgrade")," flag to make self-upgrades")),Object(i.b)("h2",{id:"0029"},"0.0.29"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"[Added]"," ",Object(i.b)("inlineCode",{parentName:"p"},"after")," directive to command.\nIt allows to run some script after main ",Object(i.b)("inlineCode",{parentName:"p"},"cmd")),Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",{parentName:"pre",className:"language-yaml"},"commands:\n  run:\n    cmd: docker-compose up redis\n    after: docker-compose stop redis\n"))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"[Added]"," ",Object(i.b)("inlineCode",{parentName:"p"},"before")," global directive to config.\nIt allows to run some script before each main ",Object(i.b)("inlineCode",{parentName:"p"},"cmd")),Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",{parentName:"pre",className:"language-yaml"},"before: |\n  function @docker-compose() {\n    docker-compose --log-level ERROR $@\n  }\n\ncommands:\n  run:\n    cmd: @docker-compose up redis\n"))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"[Added]"," ignored minixs\nIt allows to include mixin only if it exists - otherwise lets will ignore it.\nUseful for git-ignored files."),Object(i.b)("p",{parentName:"li"},"Just add ",Object(i.b)("inlineCode",{parentName:"p"},"-")," prefix to mixin filename"),Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",{parentName:"pre",className:"language-yaml"},"mixins:\n  - -my.yaml\n\ncommands:\n  run:\n    cmd: docker-compose up redis\n")))),Object(i.b)("h2",{id:"0028"},"0.0.28"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"[Fix]"," Added environment variable value coercion."),Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",{parentName:"pre",className:"language-yaml"},"commands:\n  run:\n    env:\n      VERBOSE: 1\n    cmd: docker-compose up\n")),Object(i.b)("p",{parentName:"li"},"Before 0.0.28 release this config vas invalid because ",Object(i.b)("inlineCode",{parentName:"p"},"1")," was not coerced to string ",Object(i.b)("inlineCode",{parentName:"p"},'"1"'),". Now it works as expected."))),Object(i.b)("h2",{id:"0027"},"0.0.27"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"Added ",Object(i.b)("inlineCode",{parentName:"p"},"-E")," (",Object(i.b)("inlineCode",{parentName:"p"},"--env"),") command-line flag. It allows to set(override) environment variables for a running command.\nExample:"),Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",{parentName:"pre",className:"language-bash"},'# lets.yaml\n...\ncommands:\n  greet:\n    env:\n      NAME: Morty\n    cmd: echo "Hello ${NAME}"\n...\n\nlets -E NAME=Rick greet\n'))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"Changed behavior of ",Object(i.b)("inlineCode",{parentName:"p"},"persist_checksum")," at first run. Now, if there was no checksum and we just calculated a new checksum, that means checksum has changed, hence ",Object(i.b)("inlineCode",{parentName:"p"},"LETS_CHECKSUM_CHANGED")," will be ",Object(i.b)("inlineCode",{parentName:"p"},"true"),"."))))}p.isMDXComponent=!0}}]);