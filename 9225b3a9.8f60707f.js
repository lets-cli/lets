(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{106:function(e,n,t){"use strict";t.d(n,"a",(function(){return s})),t.d(n,"b",(function(){return u}));var l=t(0),a=t.n(l);function c(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);n&&(l=l.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,l)}return t}function b(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){c(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,l,a=function(e,n){if(null==e)return{};var t,l,a={},c=Object.keys(e);for(l=0;l<c.length;l++)t=c[l],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(l=0;l<c.length;l++)t=c[l],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var r=a.a.createContext({}),o=function(e){var n=a.a.useContext(r),t=n;return e&&(t="function"==typeof e?e(n):b(b({},n),e)),t},s=function(e){var n=o(e.components);return a.a.createElement(r.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.a.createElement(a.a.Fragment,{},n)}},d=a.a.forwardRef((function(e,n){var t=e.components,l=e.mdxType,c=e.originalType,i=e.parentName,r=p(e,["components","mdxType","originalType","parentName"]),s=o(t),d=l,u=s["".concat(i,".").concat(d)]||s[d]||m[d]||c;return t?a.a.createElement(u,b(b({ref:n},r),{},{components:t})):a.a.createElement(u,b({ref:n},r))}));function u(e,n){var t=arguments,l=n&&n.mdxType;if("string"==typeof e||l){var c=t.length,i=new Array(c);i[0]=d;var b={};for(var p in n)hasOwnProperty.call(n,p)&&(b[p]=n[p]);b.originalType=e,b.mdxType="string"==typeof e?e:l,i[1]=b;for(var r=2;r<c;r++)i[r]=t[r];return a.a.createElement.apply(null,i)}return a.a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},89:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return i})),t.d(n,"metadata",(function(){return b})),t.d(n,"toc",(function(){return p})),t.d(n,"default",(function(){return o}));var l=t(3),a=t(7),c=(t(0),t(106)),i={id:"config",title:"Config reference"},b={unversionedId:"config",id:"config",isDocsHomePage:!1,title:"Config reference",description:"Config schema",source:"@site/docs/config.md",slug:"/config",permalink:"/docs/config",editUrl:"https://github.com/lets-cli/lets/edit/master/docs/docs/config.md",version:"current",sidebar:"someSidebar",previous:{title:"Advanced usage",permalink:"/docs/advanced_usage"},next:{title:"Lets environment",permalink:"/docs/env"}},p=[{value:"Top-level directives:",id:"top-level-directives",children:[{value:"Version",id:"version",children:[]},{value:"Shell",id:"shell",children:[]},{value:"Global env",id:"global-env",children:[]},{value:"Global eval_env",id:"global-eval_env",children:[]},{value:"Global before",id:"global-before",children:[]},{value:"Mixins",id:"mixins",children:[]},{value:"Ignored mixins",id:"ignored-mixins",children:[]},{value:"Commands",id:"commands",children:[]}]},{value:"Command directives:",id:"command-directives",children:[{value:"<code>description</code>",id:"description",children:[]},{value:"<code>cmd</code>",id:"cmd",children:[]},{value:"<code>after</code>",id:"after",children:[]},{value:"<code>depends</code>",id:"depends",children:[]},{value:"<code>options</code>",id:"options",children:[]},{value:"<code>env</code>",id:"env",children:[]},{value:"<code>eval_env</code>",id:"eval_env",children:[]},{value:"<code>checksum</code>",id:"checksum",children:[]},{value:"<code>persist_checksum</code>",id:"persist_checksum",children:[]}]}],r={toc:p};function o(e){var n=e.components,t=Object(a.a)(e,["components"]);return Object(c.b)("wrapper",Object(l.a)({},r,t,{components:n,mdxType:"MDXLayout"}),Object(c.b)("p",null,"Config schema"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},Object(c.b)("a",{parentName:"li",href:"#shell"},"shell")),Object(c.b)("li",{parentName:"ul"},Object(c.b)("a",{parentName:"li",href:"#mixins"},"mixins")),Object(c.b)("li",{parentName:"ul"},Object(c.b)("a",{parentName:"li",href:"#global-env"},"env")),Object(c.b)("li",{parentName:"ul"},Object(c.b)("a",{parentName:"li",href:"#global-eval_env"},"eval_env")),Object(c.b)("li",{parentName:"ul"},Object(c.b)("a",{parentName:"li",href:"#before"},"before")),Object(c.b)("li",{parentName:"ul"},Object(c.b)("a",{parentName:"li",href:"#commands"},"commands"),Object(c.b)("ul",{parentName:"li"},Object(c.b)("li",{parentName:"ul"},Object(c.b)("a",{parentName:"li",href:"#description"},"description")),Object(c.b)("li",{parentName:"ul"},Object(c.b)("a",{parentName:"li",href:"#cmd"},"cmd")),Object(c.b)("li",{parentName:"ul"},Object(c.b)("a",{parentName:"li",href:"#after"},"after")),Object(c.b)("li",{parentName:"ul"},Object(c.b)("a",{parentName:"li",href:"#depends"},"depends")),Object(c.b)("li",{parentName:"ul"},Object(c.b)("a",{parentName:"li",href:"#options"},"options")),Object(c.b)("li",{parentName:"ul"},Object(c.b)("a",{parentName:"li",href:"#env"},"env")),Object(c.b)("li",{parentName:"ul"},Object(c.b)("a",{parentName:"li",href:"#eval_env"},"eval_env")),Object(c.b)("li",{parentName:"ul"},Object(c.b)("a",{parentName:"li",href:"#checksum"},"checksum")),Object(c.b)("li",{parentName:"ul"},Object(c.b)("a",{parentName:"li",href:"#persist_checksum"},"persist_checksum"))))),Object(c.b)("h2",{id:"top-level-directives"},"Top-level directives:"),Object(c.b)("h3",{id:"version"},"Version"),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"key: version")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"type: semver string")),Object(c.b)("p",null,"Specify ",Object(c.b)("strong",{parentName:"p"},"minimum required")," ",Object(c.b)("inlineCode",{parentName:"p"},"lets")," version to run this config."),Object(c.b)("p",null,"Example:"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-yaml"},"version: '0.0.20'\n")),Object(c.b)("h3",{id:"shell"},"Shell"),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"key: shell")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"type: string")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"required: true")),Object(c.b)("p",null,"Specify shell to use when running commands"),Object(c.b)("p",null,"Example:"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-yaml"},"shell: bash\n")),Object(c.b)("h3",{id:"global-env"},"Global env"),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"key: env")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"type: map string => string")),Object(c.b)("p",null,"Specify global env for all commands."),Object(c.b)("p",null,"Example:"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-yaml"},'shell: bash\nenv:\n  MY_GLOBAL_ENV: "123"\n')),Object(c.b)("h3",{id:"global-eval_env"},"Global eval_env"),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"key: env")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"type: map string => string")),Object(c.b)("p",null,"Specify global eval_env for all commands."),Object(c.b)("p",null,"Example:"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-yaml"},'shell: bash\neval_env:\n  CURRENT_UID: echo "`id -u`:`id -g`"\n')),Object(c.b)("h3",{id:"global-before"},"Global before"),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"key: before")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"type: string")),Object(c.b)("p",null,"Specify global before script for all commands."),Object(c.b)("p",null,"Example:"),Object(c.b)("p",null,"Run ",Object(c.b)("inlineCode",{parentName:"p"},"redis")," with docker-compose using log level ERROR"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-yaml"},"shell: bash\n\nbefore:\n  function @docker-compose() {\n    docker-compose --log-level ERROR $@\n  }\n\n  export XXX=123\n\ncommands:\n  redis: |\n    echo $XXX\n    @docker-compose up redis\n")),Object(c.b)("h3",{id:"mixins"},"Mixins"),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"key: mixins")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"type: list of string")),Object(c.b)("p",null,"Allows to split ",Object(c.b)("inlineCode",{parentName:"p"},"lets.yaml")," into mixins (mixin config files)."),Object(c.b)("p",null,"To make ",Object(c.b)("inlineCode",{parentName:"p"},"lets.yaml")," small and readable its convenient to split main config into many smaller ones and include them"),Object(c.b)("p",null,"Example:"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-yaml"},"# in lets.yaml\n...\nshell: bash\nmixins:\n  - test.yaml\n\ncommands:\n  echo:\n    cmd: echo Hi\n    \n# in test.yaml\n...\ncommands:\n  test:\n    cmd: echo Testing...\n")),Object(c.b)("p",null,"And ",Object(c.b)("inlineCode",{parentName:"p"},"lets test")," works fine."),Object(c.b)("h3",{id:"ignored-mixins"},"Ignored mixins"),Object(c.b)("p",null,"It is possible to specify mixin file which could not exist. It is convenient when you have\ngit-ignored file where you write your own commands."),Object(c.b)("p",null,"To make ",Object(c.b)("inlineCode",{parentName:"p"},"lets")," read this mixin just add ",Object(c.b)("inlineCode",{parentName:"p"},"-")," prefix to filename"),Object(c.b)("p",null,"For example:"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-yaml"},"shell: bash\nmixins:\n  - -my.yaml\n")),Object(c.b)("p",null,"Now if ",Object(c.b)("inlineCode",{parentName:"p"},"my.yaml")," exists - it will be loaded as a mixin. If its not exists - ",Object(c.b)("inlineCode",{parentName:"p"},"lets")," will skip it."),Object(c.b)("h3",{id:"commands"},"Commands"),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"key: commands")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"type: mapping")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"required: true")),Object(c.b)("p",null,"Mapping of all available commands"),Object(c.b)("p",null,"Example:"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-yaml"},"commands:\n  test:\n    description: Test something\n")),Object(c.b)("h2",{id:"command-directives"},"Command directives:"),Object(c.b)("h3",{id:"description"},Object(c.b)("inlineCode",{parentName:"h3"},"description")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"key: description")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"type: string")),Object(c.b)("p",null,"Short description of command - shown in help message"),Object(c.b)("p",null,"Example:"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-yaml"},"commands:\n  test:\n    description: Test something\n")),Object(c.b)("h3",{id:"cmd"},Object(c.b)("inlineCode",{parentName:"h3"},"cmd")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"key: cmd")),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre"},"type: \n  - string\n  - array of strings\n  - map of string => string (experimental)\n")),Object(c.b)("p",null,"Actual command to run in shell."),Object(c.b)("p",null,"Can be either:"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"a string (also a multiline string)"),Object(c.b)("li",{parentName:"ul"},"an array of strings - it will allow to append all arguments passed to command as is (see bellow)"),Object(c.b)("li",{parentName:"ul"},"a map of string => string - this will allow run commands in parallel ",Object(c.b)("inlineCode",{parentName:"li"},"(experimental)"))),Object(c.b)("p",null,"Example single string:"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-yaml"},"commands:\n  test:\n    description: Test something\n    cmd: go test ./... -v\n")),Object(c.b)("p",null,"Example multiline string:"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-yaml"},'commands:\n  test:\n    description: Test something\n    cmd: |\n      echo "Running go tests..."\n      go test ./... -v\n')),Object(c.b)("p",null,"Example array of strings:"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-yaml"},"commands:\n  test:\n    description: Test something\n    cmd: \n      - go\n      - test\n      - ./...\n")),Object(c.b)("p",null,"When run with cmd as array of strings:"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-bash"},"lets test -v\n")),Object(c.b)("p",null,"the ",Object(c.b)("inlineCode",{parentName:"p"},"-v")," will be appended, so the resulting command to run will be ",Object(c.b)("inlineCode",{parentName:"p"},"go test ./... -v")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"cmd")," can be a map ",Object(c.b)("inlineCode",{parentName:"p"},"(it is experimental feature)"),"."),Object(c.b)("p",null,"Example of map of string => string"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-yaml"},"commands:\n  run:\n    description: Test something\n    cmd: \n      app: npm run app\n      nginx: docker-compose up nginx\n      redis: docker-compsoe up redis\n")),Object(c.b)("p",null,"There are two flags ",Object(c.b)("inlineCode",{parentName:"p"},"--only")," and ",Object(c.b)("inlineCode",{parentName:"p"},"--exclude")," you can use with cmd map."),Object(c.b)("p",null,"There must be used before command name:"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-bash"},"lets --only app run\n")),Object(c.b)("h3",{id:"after"},Object(c.b)("inlineCode",{parentName:"h3"},"after")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"key: after")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"type: string")),Object(c.b)("p",null,"Specify script to run after the actual command. May be useful, when we want to cleanup some resources or stop some services"),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"after")," script is guaranteed to execute if specified, event if ",Object(c.b)("inlineCode",{parentName:"p"},"cmd")," exit code is not ",Object(c.b)("inlineCode",{parentName:"p"},"0")),Object(c.b)("p",null,"Example:"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-yaml"},"commands:\n  redis:\n    description: Run redis\n    cmd: docker-compose up redis\n    after: docker-compose stop redis\n\n  run:\n    description: Run app and services\n    cmd: \n      app: node server.js\n      redis: docker-compose up redis\n    after: |\n      echo Stopping app and redis\n      docker-compose stop redis\n")),Object(c.b)("h3",{id:"depends"},Object(c.b)("inlineCode",{parentName:"h3"},"depends")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"key: depends")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"type: array of string")),Object(c.b)("p",null,"Specify what commands to run before the actual command. May be useful, when have one shared command.\nFor example, lets say you have command ",Object(c.b)("inlineCode",{parentName:"p"},"build"),", which builds docker image."),Object(c.b)("p",null,"Example:"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-yaml"},"commands:\n  build:\n    description: Build docker image\n    cmd: docker build -t myimg . -f Dockerfile\n\n  test:\n    description: Test something\n    depends: [build]\n    cmd: go test ./... -v\n\n  fmt:\n    description: Format the code\n    depends: [build]\n    cmd: go fmt\n")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"build")," command will be executed each time you run ",Object(c.b)("inlineCode",{parentName:"p"},"lets test")," or ",Object(c.b)("inlineCode",{parentName:"p"},"lets fmt")),Object(c.b)("h3",{id:"options"},Object(c.b)("inlineCode",{parentName:"h3"},"options")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"key: options")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"type: string (multiline string)")),Object(c.b)("p",null,"One of the most cool things about ",Object(c.b)("inlineCode",{parentName:"p"},"lets")," than it has built in docopt parsing.\nAll you need is to write a valid docopt for a command and lets will parse and inject all values for you."),Object(c.b)("p",null,"More info ",Object(c.b)("a",{parentName:"p",href:"http://docopt.org"},"http://docopt.org")),Object(c.b)("p",null,"When parsed, ",Object(c.b)("inlineCode",{parentName:"p"},"lets")," will provide two kind of env variabled:"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"LETSOPT_<VAR>")),Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"LETSCLI_<VAR>"))),Object(c.b)("p",null,"How does it work?"),Object(c.b)("p",null,"Lets see an example:"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-yaml"},"commands:\n  echo-env:\n    description: Echo env vars\n    options:\n      Usage: lets [--log-level=<level>] [--debug] <args>...\n      Options:\n        <args>...       List of required positional args\n        --log-level,-l      Log level\n        --debug,-d      Run with debug\n    cmd: |\n      echo ${LETSOPT_ARGS}\n      app ${LETSCLI_DEBUG}\n")),Object(c.b)("p",null,"So here we have:"),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"args")," - is a list of required positional args"),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"--log-level")," - is a key-value flag, must be provided with some value"),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"--debug")," - is a bool flag, if specified, means true, if no specified means false"),Object(c.b)("p",null,"In the env of ",Object(c.b)("inlineCode",{parentName:"p"},"cmd")," command there will be available two types of env variables:"),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"lets echo-env --log-level=info --debug one two three")),Object(c.b)("p",null,"Parsed and formatted key values"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-bash"},"echo LETSOPT_ARGS=${LETSOPT_ARGS} # LETSOPT_ARGS=one two three\necho LETSOPT_LOG_LEVEL=${LETSOPT_LOG_LEVEL} # LETSOPT_LOG_LEVEL=info\necho LETSOPT_DEBUG=${LETSOPT_DEBUG} # LETSOPT_DEBUG=true\n")),Object(c.b)("p",null,"Raw flags (useful if for example you wan to pass ",Object(c.b)("inlineCode",{parentName:"p"},"--debug")," as is)"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-bash"},"echo LETSCLI_ARGS=${LETSCLI_ARGS} # LETSCLI_ARGS=one two three\necho LETSCLI_LOG_LEVEL=${LETSCLI_LOG_LEVEL} # LETSCLI_LOG_LEVEL=--log-level info\necho LETSCLI_DEBUG=${LETSCLI_DEBUG} # LETSCLI_DEBUG=--debug\n")),Object(c.b)("h3",{id:"env"},Object(c.b)("inlineCode",{parentName:"h3"},"env")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"key: env")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"type: mapping string => string")),Object(c.b)("p",null,"Env is as simple as it sounds. Define additional env for a commmand: "),Object(c.b)("p",null,"Example:"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-yaml"},'commands:\n  test:\n    description: Test something\n    env:\n      GO111MODULE: "on"\n      GOPROXY: https://goproxy.io\n    cmd: go build -o lets *.go\n')),Object(c.b)("h3",{id:"eval_env"},Object(c.b)("inlineCode",{parentName:"h3"},"eval_env")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"key: eval_env")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"type: mapping string => string")),Object(c.b)("p",null,"Same as env but allows you to dynamically compute env:"),Object(c.b)("p",null,"Example:"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-yaml"},'commands:\n  test:\n    description: Test something\n    eval_env:\n      CURRENT_UID: echo "`id -u`:`id -g`"\n      CURRENT_USER_NAME: echo "`id -un`"\n    cmd: go build -o lets *.go\n')),Object(c.b)("p",null,"Value will be executed in shell and result will be saved in env."),Object(c.b)("h3",{id:"checksum"},Object(c.b)("inlineCode",{parentName:"h3"},"checksum")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"key: checksum")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"type: array of string | mapping string => array of string")),Object(c.b)("p",null,"Checksum used for computing file hashed. It is useful when you depend on some files content changes."),Object(c.b)("p",null,"In ",Object(c.b)("inlineCode",{parentName:"p"},"checksum")," you can specify:"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"a list of file names "),Object(c.b)("li",{parentName:"ul"},"a list of file regext patterns (parsed via go ",Object(c.b)("inlineCode",{parentName:"li"},"path/filepath.Glob"),")")),Object(c.b)("p",null,"or"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"a mapping where key is name of env variable and value is:",Object(c.b)("ul",{parentName:"li"},Object(c.b)("li",{parentName:"ul"},"a list of file names "),Object(c.b)("li",{parentName:"ul"},"a list of file regext patterns (parsed via go ",Object(c.b)("inlineCode",{parentName:"li"},"path/filepath.Glob"),")")))),Object(c.b)("p",null,"Each time a command runs, ",Object(c.b)("inlineCode",{parentName:"p"},"lets")," will calculate the checksum of all files specified in ",Object(c.b)("inlineCode",{parentName:"p"},"checksum"),"."),Object(c.b)("p",null,"Result then can be accessed via ",Object(c.b)("inlineCode",{parentName:"p"},"LETS_CHECKSUM")," env variable."),Object(c.b)("p",null,"If checksum is a mapping, e.g:"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-yaml"},"commands:\n  build:\n    checksum:\n      deps:\n        - package.json\n      doc:\n        - Readme.md\n")),Object(c.b)("p",null,"Resulting env will be:"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"LETS_CHECKSUM_DEPS")," - checksum of deps files"),Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"LETS_CHECKSUM_DOC")," - checksum of doc files"),Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"LETS_CHECKSUM")," - checksum of all checksums (deps and doc)")),Object(c.b)("p",null,"Checksum is calculated with ",Object(c.b)("inlineCode",{parentName:"p"},"sha1"),"."),Object(c.b)("p",null,"If you specify patterns, ",Object(c.b)("inlineCode",{parentName:"p"},"lets")," will try to find all matches and will calculate checksum of that files."),Object(c.b)("p",null,"Example:"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-yaml"},"shell: bash\ncommands:\n  app-build:\n    checksum: \n      - requirements-*.txt\n    cmd: |\n      docker pull myrepo/app:${LETS_CHECKSUM}\n      docker run --rm myrepo/app${LETS_CHECKSUM} python -m app       \n")),Object(c.b)("h3",{id:"persist_checksum"},Object(c.b)("inlineCode",{parentName:"h3"},"persist_checksum")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"key: persist_checksum")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"type: bool")),Object(c.b)("p",null,"This feature is useful when you want to know that something has changed between two executions of a command."),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"persist_checksum")," can be used only if ",Object(c.b)("inlineCode",{parentName:"p"},"checksum")," declared for command."),Object(c.b)("p",null,"If set to ",Object(c.b)("inlineCode",{parentName:"p"},"true"),", each run all calculated checksums will be stored to disk."),Object(c.b)("p",null,"After each subsequent run ",Object(c.b)("inlineCode",{parentName:"p"},"lets")," will check if new checksum and stored checksum are different."),Object(c.b)("p",null,"Result of that check will be exposed via ",Object(c.b)("inlineCode",{parentName:"p"},"LETS_CHECKSUM_CHANGED")," and ",Object(c.b)("inlineCode",{parentName:"p"},"LETS_CHECKSUM_[checksum-name]_CHANGED")," env variables. "),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"IMPORTANT"),": New checksum will override old checksum only if cmd has exit code ",Object(c.b)("strong",{parentName:"p"},"0")," "),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"LETS_CHECKSUM_CHANGED")," will be true after the very first execution, because when you first run command, there is no checksum yet, so we calculating new checksum - that means that checksum has changed."),Object(c.b)("p",null,"Example:"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-yaml"},"commands:\n  build:\n    persist_checksum: true\n    checksum:\n      deps:\n        - package.json\n      doc:\n        - Readme.md\n")),Object(c.b)("p",null,"Resulting env will be:"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},Object(c.b)("p",{parentName:"li"},Object(c.b)("inlineCode",{parentName:"p"},"LETS_CHECKSUM_DEPS")," - checksum of deps files")),Object(c.b)("li",{parentName:"ul"},Object(c.b)("p",{parentName:"li"},Object(c.b)("inlineCode",{parentName:"p"},"LETS_CHECKSUM_DOC")," - checksum of doc files")),Object(c.b)("li",{parentName:"ul"},Object(c.b)("p",{parentName:"li"},Object(c.b)("inlineCode",{parentName:"p"},"LETS_CHECKSUM")," - checksum of all checksums (deps and doc)")),Object(c.b)("li",{parentName:"ul"},Object(c.b)("p",{parentName:"li"},Object(c.b)("inlineCode",{parentName:"p"},"LETS_CHECKSUM_DEPS_CHANGED")," - is checksum of deps files changed")),Object(c.b)("li",{parentName:"ul"},Object(c.b)("p",{parentName:"li"},Object(c.b)("inlineCode",{parentName:"p"},"LETS_CHECKSUM_DOC_CHANGED")," - is checksum of doc files changed")),Object(c.b)("li",{parentName:"ul"},Object(c.b)("p",{parentName:"li"},Object(c.b)("inlineCode",{parentName:"p"},"LETS_CHECKSUM_CHANGED")," - is checksum of all checksums (deps and doc) changed"))))}o.isMDXComponent=!0}}]);