(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{105:function(e,t,n){"use strict";n.d(t,"a",(function(){return d})),n.d(t,"b",(function(){return u}));var a=n(0),r=n.n(a);function c(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){c(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},c=Object.keys(e);for(a=0;a<c.length;a++)n=c[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(a=0;a<c.length;a++)n=c[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var b=r.a.createContext({}),p=function(e){var t=r.a.useContext(b),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=p(e.components);return r.a.createElement(b.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},s=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,c=e.originalType,i=e.parentName,b=o(e,["components","mdxType","originalType","parentName"]),d=p(n),s=a,u=d["".concat(i,".").concat(s)]||d[s]||m[s]||c;return n?r.a.createElement(u,l(l({ref:t},b),{},{components:n})):r.a.createElement(u,l({ref:t},b))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var c=n.length,i=new Array(c);i[0]=s;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var b=2;b<c;b++)i[b]=n[b];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,n)}s.displayName="MDXCreateElement"},92:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return l})),n.d(t,"toc",(function(){return o})),n.d(t,"default",(function(){return p}));var a=n(3),r=n(7),c=(n(0),n(105)),i={id:"changelog",title:"Changelog"},l={unversionedId:"changelog",id:"changelog",isDocsHomePage:!1,title:"Changelog",description:"0.0.33",source:"@site/docs/changelog.md",slug:"/changelog",permalink:"/docs/changelog",editUrl:"https://github.com/lets-cli/lets/edit/master/docs/docs/changelog.md",version:"current",sidebar:"someSidebar",previous:{title:"Best practices",permalink:"/docs/best_practices"},next:{title:"IDE/Text editors support",permalink:"/docs/ide_support"}},o=[{value:"0.0.33",id:"0033",children:[]},{value:"0.0.32",id:"0032",children:[]},{value:"0.0.30",id:"0030",children:[]},{value:"0.0.29",id:"0029",children:[]},{value:"0.0.28",id:"0028",children:[]},{value:"0.0.27",id:"0027",children:[]}],b={toc:o};function p(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(c.b)("wrapper",Object(a.a)({},b,n,{components:t,mdxType:"MDXLayout"}),Object(c.b)("h2",{id:"0033"},Object(c.b)("a",{parentName:"h2",href:"https://github.com/lets-cli/lets/releases/tag/v0.0.33"},"0.0.33")),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"[Added]"," Allow templating in command ",Object(c.b)("inlineCode",{parentName:"li"},"options")," directive ",Object(c.b)("a",{parentName:"li",href:"/docs/advanced_usage#command-templates"},"docs"))),Object(c.b)("h2",{id:"0032"},Object(c.b)("a",{parentName:"h2",href:"https://github.com/lets-cli/lets/releases/tag/v0.0.32"},"0.0.32")),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"[Fixed]"," Publish lets to homebrew")),Object(c.b)("h2",{id:"0030"},Object(c.b)("a",{parentName:"h2",href:"https://github.com/lets-cli/lets/releases/tag/v0.0.30"},"0.0.30")),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"[Added]"," Build ",Object(c.b)("inlineCode",{parentName:"li"},"lets")," for ",Object(c.b)("inlineCode",{parentName:"li"},"arm64 (M1)")," arch"),Object(c.b)("li",{parentName:"ul"},"[Deleted]"," Drop ",Object(c.b)("inlineCode",{parentName:"li"},"386")," arch builds"),Object(c.b)("li",{parentName:"ul"},"[Added]"," Publish ",Object(c.b)("inlineCode",{parentName:"li"},"lets")," to homebrew"),Object(c.b)("li",{parentName:"ul"},"[Added]"," ",Object(c.b)("inlineCode",{parentName:"li"},"--upgrade")," flag to make self-upgrades")),Object(c.b)("h2",{id:"0029"},"0.0.29"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},Object(c.b)("p",{parentName:"li"},"[Added]"," ",Object(c.b)("inlineCode",{parentName:"p"},"after")," directive to command.\nIt allows to run some script after main ",Object(c.b)("inlineCode",{parentName:"p"},"cmd")),Object(c.b)("pre",{parentName:"li"},Object(c.b)("code",{parentName:"pre",className:"language-yaml"},"commands:\n  run:\n    cmd: docker-compose up redis\n    after: docker-compose stop redis\n"))),Object(c.b)("li",{parentName:"ul"},Object(c.b)("p",{parentName:"li"},"[Added]"," ",Object(c.b)("inlineCode",{parentName:"p"},"before")," global directive to config.\nIt allows to run some script before each main ",Object(c.b)("inlineCode",{parentName:"p"},"cmd")),Object(c.b)("pre",{parentName:"li"},Object(c.b)("code",{parentName:"pre",className:"language-yaml"},"before: |\n  function @docker-compose() {\n    docker-compose --log-level ERROR $@\n  }\n\ncommands:\n  run:\n    cmd: @docker-compose up redis\n"))),Object(c.b)("li",{parentName:"ul"},Object(c.b)("p",{parentName:"li"},"[Added]"," ignored minixs\nIt allows to include mixin only if it exists - otherwise lets will ignore it.\nUseful for git-ignored files."),Object(c.b)("p",{parentName:"li"},"Just add ",Object(c.b)("inlineCode",{parentName:"p"},"-")," prefix to mixin filename"),Object(c.b)("pre",{parentName:"li"},Object(c.b)("code",{parentName:"pre",className:"language-yaml"},"mixins:\n  - -my.yaml\n\ncommands:\n  run:\n    cmd: docker-compose up redis\n")))),Object(c.b)("h2",{id:"0028"},"0.0.28"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},Object(c.b)("p",{parentName:"li"},"[Fix]"," Added environment variable value coercion."),Object(c.b)("pre",{parentName:"li"},Object(c.b)("code",{parentName:"pre",className:"language-yaml"},"commands:\n  run:\n    env:\n      VERBOSE: 1\n    cmd: docker-compose up\n")),Object(c.b)("p",{parentName:"li"},"Before 0.0.28 release this config vas invalid because ",Object(c.b)("inlineCode",{parentName:"p"},"1")," was not coerced to string ",Object(c.b)("inlineCode",{parentName:"p"},'"1"'),". Now it works as expected."))),Object(c.b)("h2",{id:"0027"},"0.0.27"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},Object(c.b)("p",{parentName:"li"},"Added ",Object(c.b)("inlineCode",{parentName:"p"},"-E")," (",Object(c.b)("inlineCode",{parentName:"p"},"--env"),") command-line flag. It allows to set(override) environment variables for a running command.\nExample:"),Object(c.b)("pre",{parentName:"li"},Object(c.b)("code",{parentName:"pre",className:"language-bash"},'# lets.yaml\n...\ncommands:\n  greet:\n    env:\n      NAME: Morty\n    cmd: echo "Hello ${NAME}"\n...\n\nlets -E NAME=Rick greet\n'))),Object(c.b)("li",{parentName:"ul"},Object(c.b)("p",{parentName:"li"},"Changed behavior of ",Object(c.b)("inlineCode",{parentName:"p"},"persist_checksum")," at first run. Now, if there was no checksum and we just calculated a new checksum, that means checksum has changed, hence ",Object(c.b)("inlineCode",{parentName:"p"},"LETS_CHECKSUM_CHANGED")," will be ",Object(c.b)("inlineCode",{parentName:"p"},"true"),"."))))}p.isMDXComponent=!0}}]);