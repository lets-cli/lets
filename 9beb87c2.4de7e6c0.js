(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{105:function(e,n,t){"use strict";t.d(n,"a",(function(){return d})),t.d(n,"b",(function(){return u}));var r=t(0),a=t.n(r);function c(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){c(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},c=Object.keys(e);for(r=0;r<c.length;r++)t=c[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(r=0;r<c.length;r++)t=c[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var p=a.a.createContext({}),b=function(e){var n=a.a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},d=function(e){var n=b(e.components);return a.a.createElement(p.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.a.createElement(a.a.Fragment,{},n)}},s=a.a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,c=e.originalType,i=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=b(t),s=r,u=d["".concat(i,".").concat(s)]||d[s]||m[s]||c;return t?a.a.createElement(u,o(o({ref:n},p),{},{components:t})):a.a.createElement(u,o({ref:n},p))}));function u(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var c=t.length,i=new Array(c);i[0]=s;var o={};for(var l in n)hasOwnProperty.call(n,l)&&(o[l]=n[l]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var p=2;p<c;p++)i[p]=t[p];return a.a.createElement.apply(null,i)}return a.a.createElement.apply(null,t)}s.displayName="MDXCreateElement"},92:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return i})),t.d(n,"metadata",(function(){return o})),t.d(n,"toc",(function(){return l})),t.d(n,"default",(function(){return b}));var r=t(3),a=t(7),c=(t(0),t(105)),i={id:"changelog",title:"Changelog"},o={unversionedId:"changelog",id:"changelog",isDocsHomePage:!1,title:"Changelog",description:"0.0.30",source:"@site/docs/changelog.md",slug:"/changelog",permalink:"/docs/changelog",editUrl:"https://github.com/lets-cli/lets/edit/master/docs/docs/changelog.md",version:"current",sidebar:"someSidebar",previous:{title:"Best practices",permalink:"/docs/best_practices"},next:{title:"IDE/Text editors support",permalink:"/docs/ide_support"}},l=[{value:"0.0.30",id:"0030",children:[]},{value:"0.0.29",id:"0029",children:[]},{value:"0.0.28",id:"0028",children:[]},{value:"0.0.27",id:"0027",children:[]}],p={toc:l};function b(e){var n=e.components,t=Object(a.a)(e,["components"]);return Object(c.b)("wrapper",Object(r.a)({},p,t,{components:n,mdxType:"MDXLayout"}),Object(c.b)("h2",{id:"0030"},"0.0.30"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"[Added]"," Build ",Object(c.b)("inlineCode",{parentName:"li"},"lets")," for ",Object(c.b)("inlineCode",{parentName:"li"},"arm64 (M1)")," arch"),Object(c.b)("li",{parentName:"ul"},"[Deleted]"," Drop ",Object(c.b)("inlineCode",{parentName:"li"},"386")," arch builds"),Object(c.b)("li",{parentName:"ul"},"[Added]"," Publish ",Object(c.b)("inlineCode",{parentName:"li"},"lets")," to homebrew"),Object(c.b)("li",{parentName:"ul"},"[Added]"," ",Object(c.b)("inlineCode",{parentName:"li"},"--upgrade")," flag to make self-upgrades")),Object(c.b)("h2",{id:"0029"},"0.0.29"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},Object(c.b)("p",{parentName:"li"},"[Added]"," ",Object(c.b)("inlineCode",{parentName:"p"},"after")," directive to command.\nIt allows to run some script after main ",Object(c.b)("inlineCode",{parentName:"p"},"cmd")),Object(c.b)("pre",{parentName:"li"},Object(c.b)("code",{parentName:"pre",className:"language-yaml"},"commands:\n  run:\n    cmd: docker-compose up redis\n    after: docker-compose stop redis\n"))),Object(c.b)("li",{parentName:"ul"},Object(c.b)("p",{parentName:"li"},"[Added]"," ",Object(c.b)("inlineCode",{parentName:"p"},"before")," global directive to config.\nIt allows to run some script before each main ",Object(c.b)("inlineCode",{parentName:"p"},"cmd")),Object(c.b)("pre",{parentName:"li"},Object(c.b)("code",{parentName:"pre",className:"language-yaml"},"before: |\n  function @docker-compose() {\n    docker-compose --log-level ERROR $@\n  }\n\ncommands:\n  run:\n    cmd: @docker-compose up redis\n"))),Object(c.b)("li",{parentName:"ul"},Object(c.b)("p",{parentName:"li"},"[Added]"," ignored minixs\nIt allows to include mixin only if it exists - otherwise lets will ignore it.\nUseful for git-ignored files."),Object(c.b)("p",{parentName:"li"},"Just add ",Object(c.b)("inlineCode",{parentName:"p"},"-")," prefix to mixin filename"),Object(c.b)("pre",{parentName:"li"},Object(c.b)("code",{parentName:"pre",className:"language-yaml"},"mixins:\n  - -my.yaml\n\ncommands:\n  run:\n    cmd: docker-compose up redis\n")))),Object(c.b)("h2",{id:"0028"},"0.0.28"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},Object(c.b)("p",{parentName:"li"},"[Fix]"," Added environment variable value coercion."),Object(c.b)("pre",{parentName:"li"},Object(c.b)("code",{parentName:"pre",className:"language-yaml"},"commands:\n  run:\n    env:\n      VERBOSE: 1\n    cmd: docker-compose up\n")),Object(c.b)("p",{parentName:"li"},"Before 0.0.28 release this config vas invalid because ",Object(c.b)("inlineCode",{parentName:"p"},"1")," was not coerced to string ",Object(c.b)("inlineCode",{parentName:"p"},'"1"'),". Now it works as expected."))),Object(c.b)("h2",{id:"0027"},"0.0.27"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},Object(c.b)("p",{parentName:"li"},"Added ",Object(c.b)("inlineCode",{parentName:"p"},"-E")," (",Object(c.b)("inlineCode",{parentName:"p"},"--env"),") command-line flag. It allows to set(override) environment variables for a running command.\nExample:"),Object(c.b)("pre",{parentName:"li"},Object(c.b)("code",{parentName:"pre",className:"language-bash"},'# lets.yaml\n...\ncommands:\n  greet:\n    env:\n      NAME: Morty\n    cmd: echo "Hello ${NAME}"\n...\n\nlets -E NAME=Rick greet\n'))),Object(c.b)("li",{parentName:"ul"},Object(c.b)("p",{parentName:"li"},"Changed behavior of ",Object(c.b)("inlineCode",{parentName:"p"},"persist_checksum")," at first run. Now, if there was no checksum and we just calculated a new checksum, that means checksum has changed, hence ",Object(c.b)("inlineCode",{parentName:"p"},"LETS_CHECKSUM_CHANGED")," will be ",Object(c.b)("inlineCode",{parentName:"p"},"true"),"."))))}b.isMDXComponent=!0}}]);