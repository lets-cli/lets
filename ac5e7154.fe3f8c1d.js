(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{106:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return d}));var a=n(0),r=n.n(a);function c(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){c(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},c=Object.keys(e);for(a=0;a<c.length;a++)n=c[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(a=0;a<c.length;a++)n=c[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=r.a.createContext({}),p=function(e){var t=r.a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},b=function(e){var t=p(e.components);return r.a.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},u=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,c=e.originalType,i=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),b=p(n),u=a,d=b["".concat(i,".").concat(u)]||b[u]||m[u]||c;return n?r.a.createElement(d,l(l({ref:t},s),{},{components:n})):r.a.createElement(d,l({ref:t},s))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var c=n.length,i=new Array(c);i[0]=u;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var s=2;s<c;s++)i[s]=n[s];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},95:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return l})),n.d(t,"toc",(function(){return o})),n.d(t,"default",(function(){return p}));var a=n(3),r=n(7),c=(n(0),n(106)),i={id:"best_practices",title:"Best practices"},l={unversionedId:"best_practices",id:"best_practices",isDocsHomePage:!1,title:"Best practices",description:"Default commands",source:"@site/docs/best_practices.md",slug:"/best_practices",permalink:"/docs/best_practices",editUrl:"https://github.com/lets-cli/lets/edit/master/docs/docs/best_practices.md",version:"current",sidebar:"someSidebar",previous:{title:"Example for JavaScript/Node.js",permalink:"/docs/example_js"},next:{title:"Changelog",permalink:"/docs/changelog"}},o=[{value:"Default commands",id:"default-commands",children:[]},{value:"Split <code>lets.yaml</code> when it becomes big.",id:"split-letsyaml-when-it-becomes-big",children:[]},{value:"Use checskums",id:"use-checskums",children:[]}],s={toc:o};function p(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(c.b)("wrapper",Object(a.a)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(c.b)("h3",{id:"default-commands"},"Default commands"),Object(c.b)("p",null,"If you have many projects (lets say - microservices) - it would be great to have one way to run and operate them when developing"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"run")," command - the main purpouse of this command is to run all in once. If all projects has this command its easier to remember."),Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"test")," command - each projects should have a tests and a way to run them, either one file or all tests at once"),Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"init")," command - some kind of project initialization - creates missing files, dirs for developer, checks permissions, login to docker registry, checks inotify limits for tools such as webpack and other file watchers.")),Object(c.b)("h3",{id:"split-letsyaml-when-it-becomes-big"},"Split ",Object(c.b)("inlineCode",{parentName:"h3"},"lets.yaml")," when it becomes big."),Object(c.b)("p",null,"If ",Object(c.b)("inlineCode",{parentName:"p"},"lets.yaml")," became big, it may be great to split it in a smaller, more specific files using ",Object(c.b)("inlineCode",{parentName:"p"},"mixins")," directive.\nFor example:"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},Object(c.b)("strong",{parentName:"li"},Object(c.b)("inlineCode",{parentName:"strong"},"lets.yaml"))),Object(c.b)("li",{parentName:"ul"},Object(c.b)("strong",{parentName:"li"},Object(c.b)("inlineCode",{parentName:"strong"},"lets.test.yaml"))),Object(c.b)("li",{parentName:"ul"},Object(c.b)("strong",{parentName:"li"},Object(c.b)("inlineCode",{parentName:"strong"},"lets.build.yaml"))),Object(c.b)("li",{parentName:"ul"},Object(c.b)("strong",{parentName:"li"},Object(c.b)("inlineCode",{parentName:"strong"},"lets.frontend.yaml"))),Object(c.b)("li",{parentName:"ul"},Object(c.b)("strong",{parentName:"li"},Object(c.b)("inlineCode",{parentName:"strong"},"lets.i18n.yaml")))),Object(c.b)("p",null,"In each of these files we then hold all specific tasks."),Object(c.b)("h3",{id:"use-checskums"},"Use checskums"),Object(c.b)("p",null,"Checksums can help you decrease amount of task executions. How ? Lets see."),Object(c.b)("p",null,"Suppose we have ",Object(c.b)("inlineCode",{parentName:"p"},"js")," project and we obviously holding all dependencies in ",Object(c.b)("inlineCode",{parentName:"p"},"package.json"),".\nAlso we are using Docker for reproducible development environment."),Object(c.b)("p",null,"Dockerfile"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-bash"},'FROM alpine:3.8\n\nWORKDIR /work\n\nCOPY package.json .\n\nRUN npm install\n\nCMD ["npm start"]\n')),Object(c.b)("p",null,"What if we want to rebuild docker image every time we changed dependency ?"),Object(c.b)("p",null,"lets.yaml"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre"},"shell: bash\n\ncommands:\n  run:\n    depends: \n      - build\n    cmd: docker-compose up application\n\n  build:\n    checksum:\n      - package.json\n    persist_checksum: true  \n    cmd: |\n      if [[ ${LETS_CHECKSUM_CHANGED} == true ]]; then \n        docker-compose build application\n      else\n        Image is up to date\n      fi\n")),Object(c.b)("p",null,"As you can see, we execute ",Object(c.b)("inlineCode",{parentName:"p"},"build")," command each time we execute ",Object(c.b)("inlineCode",{parentName:"p"},"run")," command (",Object(c.b)("inlineCode",{parentName:"p"},"depends"),")."),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"persist_checksum")," will save calculated checksum to ",Object(c.b)("inlineCode",{parentName:"p"},".lets")," directory and all subsequent calls of ",Object(c.b)("inlineCode",{parentName:"p"},"build")," command will\nread checksum from disk, calculate new checksum, and compare them. If ",Object(c.b)("inlineCode",{parentName:"p"},"package.json")," will change - we will rebuild the image."))}p.isMDXComponent=!0}}]);